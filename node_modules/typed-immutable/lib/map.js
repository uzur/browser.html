(function (factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./typed", "immutable"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./typed"), require("immutable"));
  }
})(function (exports, _typed, _immutable) {
  "use strict";

  var _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) { _arr.push(_step.value); if (i && _arr.length === i) break; } return _arr; } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } };

  var _defineProperty = function (obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); };

  var _createComputedClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var prop = props[i]; prop.configurable = true; if (prop.value) prop.writable = true; Object.defineProperty(target, prop.key, prop); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

  var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

  var Typed = _typed.Typed;
  var Type = _typed.Type;
  var Union = _typed.Union;
  var Any = _typed.Any;
  var typeOf = _typed.typeOf;
  var construct = _typed.construct;
  var Immutable = _immutable;

  var ImmutableMap = Immutable.Map;
  var Keyed = Immutable.Iterable.Keyed;

  var $store = Typed.store;
  var $type = Typed.type;
  var $read = Typed.read;
  var $step = Typed.step;
  var $init = Typed.init;
  var $result = Typed.result;
  var $label = Typed.label;
  var $typeName = Typed.typeName;
  var $empty = Typed.empty;

  var EntryType = (function (_Type) {
    function EntryType(key, value, label) {
      _classCallCheck(this, EntryType);

      this.key = key;
      this.value = value;
      this.label = label;
    }

    _inherits(EntryType, _Type);

    _createComputedClass(EntryType, [{
      key: Typed.typeName,
      value: function () {
        return this.label || "" + this.key[$typeName]() + ", " + this.value[$typeName]();
      }
    }, {
      key: Typed.read,
      value: function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2);

        var key = _ref2[0];
        var value = _ref2[1];

        var keyResult = this.key[$read](key);
        if (keyResult instanceof TypeError) {
          return TypeError("Invalid key: " + keyResult.message);
        }

        var valueResult = this.value[$read](value);
        if (valueResult instanceof TypeError) {
          return TypeError("Invalid value: " + valueResult.message);
        }

        return [keyResult, valueResult];
      }
    }]);

    return EntryType;
  })(Type);

  var InferredEntryType = (function (_EntryType) {
    function InferredEntryType() {
      _classCallCheck(this, InferredEntryType);

      this.key = null;
      this.value = null;
    }

    _inherits(InferredEntryType, _EntryType);

    _createComputedClass(InferredEntryType, [{
      key: "toStatic",
      value: function toStatic() {
        return new MapEntryType(this.key, this.value);
      }
    }, {
      key: Typed.typeName,
      value: function () {
        var key = this.key ? this.key[$typeName]() : "TypeInferred";
        var value = this.value ? this.value[$typeName]() : "TypeInferred";
        return "" + key + ", " + value;
      }
    }, {
      key: Typed.read,
      value: function (entry) {
        // typeOf usually creates type for the value with that
        // value being a default. For type inference we should
        // actually use a base type instead of type with default
        // there for we use prototype of the constructor.
        var key = typeOf(entry[0]).constructor.prototype;
        this.key = this.key ? Union(this.key, key) : key;

        var value = typeOf(entry[1]).constructor.prototype;
        this.value = this.value ? Union(this.value, value) : value;

        return entry;
      }
    }]);

    return InferredEntryType;
  })(EntryType);

  var TypedMap = (function (_Immutable$Map) {
    function TypedMap(value) {
      _classCallCheck(this, TypedMap);

      return TypedMap.prototype[$read](value);
    }

    _inherits(TypedMap, _Immutable$Map);

    _createComputedClass(TypedMap, [{
      key: "advance",
      value: function advance(store) {
        var result = store.__ownerID ? this : construct(this);
        result[$store] = store;
        result.size = store.size;
        result.__ownerID = store.__ownerID;
        return result;
      }
    }, {
      key: Typed.init,
      value: function () {
        return this.advance(ImmutableMap()).asMutable();
      }
    }, {
      key: Typed.step,
      value: function (state, entry) {
        var result = this[$type][$read](entry);

        if (result instanceof TypeError) {
          throw result;
        }

        var _result = _slicedToArray(result, 2);

        var key = _result[0];
        var value = _result[1];

        return state.advance(state[$store].set(key, value));
      }
    }, {
      key: Typed.result,
      value: function (state) {
        return state.asImmutable();
      }
    }, {
      key: Typed.read,
      value: function (structure) {
        var constructor = this.constructor;

        if (structure === null || structure === void 0) {
          if (!this[$empty]) {
            this[$empty] = this.advance(ImmutableMap());
          }

          return this[$empty];
        }

        var isInstance = structure instanceof constructor && structure.constructor === constructor;

        if (isInstance) {
          return structure;
        }

        var entries = Keyed(structure).entries();
        var type = this[$type];
        var state = this[$init]();

        while (true) {
          var _entries$next = entries.next();

          var done = _entries$next.done;
          var entry = _entries$next.value;

          if (done) {
            break;
          }

          var result = type[$read](entry);

          if (result instanceof TypeError) {
            return result;
          }

          state = state[$step](state, result);
        }

        return this[$result](state);
      }
    }, {
      key: Typed.typeName,
      value: function () {
        return this[$label] || "Typed.Map(" + this[$type][$typeName]() + ")";
      }
    }, {
      key: "toString",
      value: function toString() {
        return this.__toString(this[$typeName]() + "({", "})");
      }
    }, {
      key: "has",
      value: function has(key) {
        return this[$store].has(key);
      }
    }, {
      key: "get",
      value: function get(key, fallback) {
        return this[$store].get(key, fallback);
      }
    }, {
      key: "clear",
      value: function clear() {
        if (this.size === 0) {
          return this;
        }

        if (this.__ownerID) {
          return this.advance(this[$store].clear());
        }

        return this[$empty] || this[$read]();
      }
    }, {
      key: "remove",
      value: function remove(key) {
        return this.advance(this[$store].remove(key));
      }
    }, {
      key: "set",
      value: function set(key, value) {
        return this[$step](this, [key, value]);
      }
    }, {
      key: "wasAltered",
      value: function wasAltered() {
        return this[$store].wasAltered();
      }
    }, {
      key: "__ensureOwner",
      value: function __ensureOwner(ownerID) {
        var result = this.__ownerID === ownerID ? this : !ownerID ? this : construct(this);

        var store = this[$store].__ensureOwner(ownerID);
        result[$store] = store;
        result.size = store.size;
        result.__ownerID = ownerID;

        return result;
      }
    }, {
      key: "__iterator",
      value: function __iterator(type, reverse) {
        this[$store].__iterator(type, reverse);
      }
    }, {
      key: "__iterate",
      value: function __iterate(f, reverse) {
        this[$store].__iterate(f, reverse);
      }
    }]);

    return TypedMap;
  })(Immutable.Map);

  TypedMap.prototype[Typed.DELETE] = TypedMap.prototype.remove;

  var TypeInferredMap = (function (_TypedMap) {
    function TypeInferredMap() {
      _classCallCheck(this, TypeInferredMap);
    }

    _inherits(TypeInferredMap, _TypedMap);

    _createComputedClass(TypeInferredMap, [{
      key: Typed.init,
      value: function () {
        var result = this.advance(ImmutableMap()).asMutable();
        result[$type] = new InferredEntryType();
        return result;
      }
    }, {
      key: Typed.result,
      value: function (state) {
        var result = state.asImmutable();
        result[$type] = state[$type].toStatic();

        return result;
      }
    }]);

    return TypeInferredMap;
  })(TypedMap);

  var Map = function Map(keyDescriptor, valueDescriptor, label) {
    if (keyDescriptor === void 0) {
      throw TypeError("Typed.Map must be passed a key type descriptor");
    }

    if (valueDescriptor === void 0) {
      throw TypeError("Typed.Map must be passed a value type descriptor");
    }

    // If both key and value types are Any this is just a plain immutable map.
    if (keyDescriptor === Any && valueDescriptor === Any) {
      return ImmutableMap;
    }

    var keyType = typeOf(keyDescriptor);
    var valueType = typeOf(valueDescriptor);

    if (keyType === Any && keyDescriptor !== Any) {
      throw TypeError("Typed.Map was passed an invalid key type descriptor: " + keyDescriptor);
    }

    if (valueType === Any && valueDescriptor !== Any) {
      throw TypeError("Typed.Map was passed an invalid value type descriptor: " + valueDescriptor);
    }

    var type = new EntryType(keyType, valueType, label);

    var MapType = (function (_MapType) {
      var _MapTypeWrapper = function MapType(_x) {
        return _MapType.apply(this, arguments);
      };

      _MapTypeWrapper.toString = function () {
        return _MapType.toString();
      };

      return _MapTypeWrapper;
    })(function (value) {
      var isThis = this instanceof MapType;
      var constructor = isThis ? this.constructor : MapType;

      if (value instanceof constructor) {
        return value;
      }

      var result = constructor.prototype[$read](value);

      if (result instanceof TypeError) {
        throw result;
      }

      var isCall = isThis && construct.prototype === this;

      if (!isCall && isThis) {
        this[$store] = result[$store];
        this.size = result.size;
      } else {
        return result;
      }

      return this;
    });
    MapType.prototype = Object.create(MapPrototype, (function () {
      var _Object$create = {
        constructor: { value: MapType } };

      _defineProperty(_Object$create, $type, { value: type });

      _defineProperty(_Object$create, $label, { value: label });

      return _Object$create;
    })());

    return MapType;
  };
  exports.Map = Map;
  Map.Type = TypedMap;
  Map.prototype = TypedMap.prototype;
  var MapPrototype = Map.prototype;
});
//# sourceMappingURL=data:application/json;base64,