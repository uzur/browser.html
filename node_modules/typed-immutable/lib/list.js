(function (factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./typed", "immutable"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./typed"), require("immutable"));
  }
})(function (exports, _typed, _immutable) {
  "use strict";

  var _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) { _arr.push(_step.value); if (i && _arr.length === i) break; } return _arr; } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } };

  var _defineProperty = function (obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); };

  var _createComputedClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var prop = props[i]; prop.configurable = true; if (prop.value) prop.writable = true; Object.defineProperty(target, prop.key, prop); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

  var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

  var Typed = _typed.Typed;
  var Type = _typed.Type;
  var Union = _typed.Union;
  var Any = _typed.Any;
  var typeOf = _typed.typeOf;
  var construct = _typed.construct;
  var Immutable = _immutable;

  var ImmutableList = Immutable.List;
  var Indexed = Immutable.Iterable.Indexed;

  var $store = Typed.store;
  var $type = Typed.type;
  var $read = Typed.read;
  var $step = Typed.step;
  var $init = Typed.init;
  var $result = Typed.result;
  var $label = Typed.label;
  var $typeName = Typed.typeName;
  var $empty = Typed.empty;

  var change = function (list, f) {
    var result = list.__ownerID ? list : construct(list);
    var store = f(list[$store]);
    result[$store] = store;
    result.size = store.size;
    return result;
  };

  var clear = function (target) {
    return target.clear();
  };
  var pop = function (target) {
    return target.pop();
  };
  var shift = function (target) {
    return target.shift();
  };

  var TypeInferer = (function (_Type) {
    function TypeInferer() {
      _classCallCheck(this, TypeInferer);

      if (_Type != null) {
        _Type.apply(this, arguments);
      }
    }

    _inherits(TypeInferer, _Type);

    _createComputedClass(TypeInferer, [{
      key: Typed.typeName,
      value: function () {
        return "TypeInferer";
      }
    }, {
      key: Typed.read,
      value: function (value) {
        // typeOf usually creates type for the value with that
        // value being a default. For type inference we should
        // actually use a base type instead of type with default
        // there for we use prototype of the constructor.
        var type = typeOf(value).constructor.prototype;
        this.type = this.type ? Union(this.type, type) : type;
        return value;
      }
    }]);

    return TypeInferer;
  })(Type);

  var TypeInferedList = (function (_Immutable$List) {
    function TypeInferedList(value) {
      _classCallCheck(this, TypeInferedList);

      return TypeInferedList.prototype[$read](value);
    }

    _inherits(TypeInferedList, _Immutable$List);

    _createComputedClass(TypeInferedList, [{
      key: Typed.init,
      value: function () {
        var result = construct(this).asMutable();
        result[$type] = new TypeInferer();
        return result;
      }
    }, {
      key: Typed.result,
      value: function (result) {
        var list = result.asImmutable();
        list[$type] = result[$type].type;

        return list;
      }
    }, {
      key: Typed.read,
      value: function (input) {
        var Type = this.constructor;

        if (input === null || input === void 0) {
          if (!Type[$empty]) {
            var result = construct(this);
            result[$store] = ImmutableList();
            result.size = 0;
            Type[$empty] = result;
          }

          return Type[$empty];
        }

        if (input instanceof Type && input.constructor === Type) {
          return input;
        }

        var list = this[$init]();
        Indexed(input).forEach(function (value, index) {
          list.set(index, value);
        });

        return this[$result](list);
      }
    }, {
      key: Typed.step,
      value: function (result, _ref) {
        var _ref2 = _slicedToArray(_ref, 2);

        var key = _ref2[0];
        var value = _ref2[1];

        return change(result, function () {
          var store = arguments[0] === undefined ? ImmutableList() : arguments[0];
          return store.set(key, value);
        });
      }
    }, {
      key: Typed.typeName,
      value: function () {
        return this[$label] || "Typed.List(" + this[$type][$typeName]() + ")";
      }
    }, {
      key: "toString",
      value: function toString() {
        return this.__toString(this[$typeName]() + "([", "])");
      }
    }, {
      key: "has",
      value: function has(key) {
        return this[$store].has(key);
      }
    }, {
      key: "get",
      value: function get(index, notSetValue) {
        return this[$store] ? this[$store].get(index, notSetValue) : notSetValue;
      }
    }, {
      key: "clear",
      value: (function (_clear) {
        var _clearWrapper = function clear() {
          return _clear.apply(this, arguments);
        };

        _clearWrapper.toString = function () {
          return _clear.toString();
        };

        return _clearWrapper;
      })(function () {
        if (this.__ownerID) {
          return change(this, clear);
        }

        return this[$empty] || this[$read]();
      })
    }, {
      key: "remove",
      value: function remove(index) {
        return change(this, function (store) {
          return store && store.remove(index);
        });
      }
    }, {
      key: "set",
      value: function set(index, value) {
        if (index > this.size) {
          throw TypeError("Index \"" + index + "\" is out of bound");
        }

        var result = this[$type][$read](value);

        if (result instanceof TypeError) {
          throw TypeError("Invalid value: " + result.message);
        }

        return this[$step](this, [index, result]);
      }
    }, {
      key: "push",
      value: function push() {
        for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
          values[_key] = arguments[_key];
        }

        var type = this[$type];
        var items = [];
        var count = values.length;
        var index = 0;
        while (index < count) {
          var value = values[index];
          var result = type[$read](value);

          if (result instanceof TypeError) {
            throw TypeError("Invalid value: " + result.message);
          }

          items.push(result);
          index = index + 1;
        }

        return change(this, function (store) {
          return store ? store.push.apply(store, items) : ImmutableList.apply(undefined, items);
        });
      }
    }, {
      key: "pop",
      value: (function (_pop) {
        var _popWrapper = function pop() {
          return _pop.apply(this, arguments);
        };

        _popWrapper.toString = function () {
          return _pop.toString();
        };

        return _popWrapper;
      })(function () {
        return change(this, pop);
      })
    }, {
      key: "unshift",
      value: function unshift() {
        for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
          values[_key] = arguments[_key];
        }

        var type = this[$type];
        var items = [];
        var count = values.length;
        var index = 0;

        while (index < count) {
          var value = values[index];
          var result = type[$read](value);

          if (result instanceof TypeError) {
            throw TypeError("Invalid value: " + result.message);
          }

          items.push(result);
          index = index + 1;
        }

        return change(this, function (store) {
          return store ? store.unshift.apply(store, items) : ImmutableList.apply(undefined, items);
        });
      }
    }, {
      key: "shift",
      value: (function (_shift) {
        var _shiftWrapper = function shift() {
          return _shift.apply(this, arguments);
        };

        _shiftWrapper.toString = function () {
          return _shift.toString();
        };

        return _shiftWrapper;
      })(function () {
        return change(this, shift);
      })
    }, {
      key: "setSize",
      value: function setSize(size) {
        if (size > this.size) {
          throw TypeError("setSize may only downsize");
        }

        return change(this, function (store) {
          return store.setSize(size);
        });
      }
    }, {
      key: "slice",
      value: function slice(begin, end) {
        return change(this, function (store) {
          return store && store.slice(begin, end);
        });
      }
    }, {
      key: "wasAltered",
      value: function wasAltered() {
        return this[$store].wasAltered();
      }
    }, {
      key: "__ensureOwner",
      value: function __ensureOwner(ownerID) {
        var result = this.__ownerID === ownerID ? this : !ownerID ? this : construct(this);

        result.__ownerID = ownerID;
        result[$store] = this[$store] ? this[$store].__ensureOwner(ownerID) : ImmutableList().__ensureOwner(ownerID);

        return result;
      }
    }, {
      key: "__iterator",
      value: function __iterator(type, reverse) {
        var _this = this;

        return Indexed(this[$store]).map(function (_, key) {
          return _this.get(key);
        }).__iterator(type, reverse);
      }
    }, {
      key: "__iterate",
      value: function __iterate(f, reverse) {
        var _this = this;

        return Indexed(this[$store]).map(function (_, key) {
          return _this.get(key);
        }).__iterate(f, reverse);
      }
    }], [{
      key: "from",
      value: function from(list) {
        var result = construct(this.prototype);
        result[$store] = list[$store];
        return result;
      }
    }]);

    return TypeInferedList;
  })(Immutable.List);

  TypeInferedList.prototype[Typed.DELETE] = TypeInferedList.prototype.remove;

  var TypedList = (function (_TypeInferedList) {
    function TypedList() {
      _classCallCheck(this, TypedList);
    }

    _inherits(TypedList, _TypeInferedList);

    _createComputedClass(TypedList, [{
      key: Typed.init,
      value: function () {
        return construct(this).asMutable();
      }
    }, {
      key: Typed.result,
      value: function (result) {
        return result.asImmutable();
      }
    }, {
      key: "map",
      value: function map(mapper, context) {
        if (this.size === 0) {
          return this;
        } else {
          var result = TypeInferedList.from(this).map(mapper, context);
          if (result[$type] === this[$type]) {
            var list = construct(this);
            list[$store] = result[$store];
            list.size = result.size;
            return list;
          } else {
            return result;
          }
        }
      }
    }]);

    return TypedList;
  })(TypeInferedList);

  var List = function List(descriptor, label) {
    if (descriptor === void 0) {
      throw TypeError("Typed.List must be passed a type descriptor");
    }

    if (descriptor === Any) {
      return Immutable.List;
    }

    var type = typeOf(descriptor);

    if (type === Any) {
      throw TypeError("Typed.List was passed an invalid type descriptor: ${descriptor}");
    }

    var ListType = (function (_ListType) {
      var _ListTypeWrapper = function ListType(_x) {
        return _ListType.apply(this, arguments);
      };

      _ListTypeWrapper.toString = function () {
        return _ListType.toString();
      };

      return _ListTypeWrapper;
    })(function (value) {
      var isListType = this instanceof ListType;
      var Type = isListType ? this.constructor : ListType;

      if (value instanceof Type) {
        return value;
      }

      var result = Type.prototype[$read](value);

      if (result instanceof TypeError) {
        throw result;
      }

      // `list.map(f)` will in fact cause `list.constructor(items)` to be
      // invoked there for we need to check if `this[$store]` was
      // assigned to know if it's that or if it's a `new ListType()` call.
      if (isListType && !this[$store]) {
        this[$store] = result[$store];
        this.size = result.size;
      } else {
        return result;
      }

      return this;
    });
    ListType.of = ImmutableList.of;
    ListType.prototype = Object.create(ListPrototype, (function () {
      var _Object$create = {
        constructor: { value: ListType } };

      _defineProperty(_Object$create, $type, { value: type });

      _defineProperty(_Object$create, $label, { value: label });

      return _Object$create;
    })());

    return ListType;
  };
  exports.List = List;
  List.Type = TypedList;
  List.prototype = TypedList.prototype;
  var ListPrototype = TypedList.prototype;
});
//# sourceMappingURL=data:application/json;base64,