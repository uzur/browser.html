(function (factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./test", "immutable", "../record", "../typed"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./test"), require("immutable"), require("../record"), require("../typed"));
  }
})(function (exports, _test, _immutable, _record, _typed) {
  "use strict";

  var test = _test["default"];
  var Immutable = _immutable;
  var Record = _record.Record;
  var Typed = _typed.Typed;
  var typeOf = _typed.typeOf;
  var Union = _typed.Union;
  var Maybe = _typed.Maybe;

  var Point = Record({
    x: Number(0),
    y: Number(0)
  }, "Point");

  test("reading record short-cirquits", function (assert) {
    var v = Point();
    var reader = typeOf(Point);

    assert.equal(reader[Typed.read](v), v);
  });

  test("reading records", function (assert) {
    var reader = typeOf(Point);

    var v1 = reader[Typed.read]();
    var v2 = reader[Typed.read]({ x: 10 });
    var v3 = reader[Typed.read]({ y: 10 });
    var v4 = reader[Typed.read]({ x: 1, y: 2 });

    assert.ok(v1 instanceof Record);
    assert.ok(v2 instanceof Record);
    assert.ok(v3 instanceof Record);
    assert.ok(v4 instanceof Record);

    assert.ok(v1 instanceof Point);
    assert.ok(v2 instanceof Point);
    assert.ok(v3 instanceof Point);
    assert.ok(v4 instanceof Point);

    assert.deepEqual(v1.toJSON(), { x: 0, y: 0 });
    assert.deepEqual(v2.toJSON(), { x: 10, y: 0 });
    assert.deepEqual(v3.toJSON(), { x: 0, y: 10 });
    assert.deepEqual(v4.toJSON(), { x: 1, y: 2 });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L3JlY29yZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7TUFBTyxJQUFJO01BQ0MsU0FBUztNQUNiLE1BQU0sV0FBTixNQUFNO01BQ04sS0FBSyxVQUFMLEtBQUs7TUFBRSxNQUFNLFVBQU4sTUFBTTtNQUFFLEtBQUssVUFBTCxLQUFLO01BQUUsS0FBSyxVQUFMLEtBQUs7O0FBRW5DLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQztBQUNuQixLQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNaLEtBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0dBQ2IsRUFBRSxPQUFPLENBQUMsQ0FBQTs7QUFFWCxNQUFJLENBQUMsK0JBQStCLEVBQUUsVUFBQSxNQUFNLEVBQUk7QUFDOUMsUUFBTSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUE7QUFDakIsUUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBOztBQUU1QixVQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7R0FDdkMsQ0FBQyxDQUFBOztBQUdGLE1BQUksQ0FBQyxpQkFBaUIsRUFBRSxVQUFBLE1BQU0sRUFBSTtBQUNoQyxRQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7O0FBRTVCLFFBQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQTtBQUMvQixRQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUE7QUFDckMsUUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFBO0FBQ3JDLFFBQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBOztBQUV6QyxVQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxNQUFNLENBQUMsQ0FBQTtBQUMvQixVQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxNQUFNLENBQUMsQ0FBQTtBQUMvQixVQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxNQUFNLENBQUMsQ0FBQTtBQUMvQixVQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxNQUFNLENBQUMsQ0FBQTs7QUFFL0IsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksS0FBSyxDQUFDLENBQUE7QUFDOUIsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksS0FBSyxDQUFDLENBQUE7QUFDOUIsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksS0FBSyxDQUFDLENBQUE7QUFDOUIsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksS0FBSyxDQUFDLENBQUE7O0FBRTlCLFVBQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQTtBQUN4QyxVQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUE7QUFDekMsVUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFBO0FBQ3pDLFVBQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQTtHQUN6QyxDQUFDLENBQUEiLCJmaWxlIjoic3JjL3Rlc3QvcmVjb3JkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRlc3QgZnJvbSBcIi4vdGVzdFwiXG5pbXBvcnQgKiBhcyBJbW11dGFibGUgZnJvbSBcImltbXV0YWJsZVwiXG5pbXBvcnQge1JlY29yZH0gZnJvbSBcIi4uL3JlY29yZFwiXG5pbXBvcnQge1R5cGVkLCB0eXBlT2YsIFVuaW9uLCBNYXliZX0gZnJvbSBcIi4uL3R5cGVkXCJcblxuY29uc3QgUG9pbnQgPSBSZWNvcmQoe1xuICB4OiBOdW1iZXIoMCksXG4gIHk6IE51bWJlcigwKVxufSwgXCJQb2ludFwiKVxuXG50ZXN0KFwicmVhZGluZyByZWNvcmQgc2hvcnQtY2lycXVpdHNcIiwgYXNzZXJ0ID0+IHtcbiAgY29uc3QgdiA9IFBvaW50KClcbiAgY29uc3QgcmVhZGVyID0gdHlwZU9mKFBvaW50KVxuXG4gIGFzc2VydC5lcXVhbChyZWFkZXJbVHlwZWQucmVhZF0odiksIHYpXG59KVxuXG5cbnRlc3QoXCJyZWFkaW5nIHJlY29yZHNcIiwgYXNzZXJ0ID0+IHtcbiAgY29uc3QgcmVhZGVyID0gdHlwZU9mKFBvaW50KVxuXG4gIGNvbnN0IHYxID0gcmVhZGVyW1R5cGVkLnJlYWRdKClcbiAgY29uc3QgdjIgPSByZWFkZXJbVHlwZWQucmVhZF0oe3g6MTB9KVxuICBjb25zdCB2MyA9IHJlYWRlcltUeXBlZC5yZWFkXSh7eToxMH0pXG4gIGNvbnN0IHY0ID0gcmVhZGVyW1R5cGVkLnJlYWRdKHt4OjEsIHk6Mn0pXG5cbiAgYXNzZXJ0Lm9rKHYxIGluc3RhbmNlb2YgUmVjb3JkKVxuICBhc3NlcnQub2sodjIgaW5zdGFuY2VvZiBSZWNvcmQpXG4gIGFzc2VydC5vayh2MyBpbnN0YW5jZW9mIFJlY29yZClcbiAgYXNzZXJ0Lm9rKHY0IGluc3RhbmNlb2YgUmVjb3JkKVxuXG4gIGFzc2VydC5vayh2MSBpbnN0YW5jZW9mIFBvaW50KVxuICBhc3NlcnQub2sodjIgaW5zdGFuY2VvZiBQb2ludClcbiAgYXNzZXJ0Lm9rKHYzIGluc3RhbmNlb2YgUG9pbnQpXG4gIGFzc2VydC5vayh2NCBpbnN0YW5jZW9mIFBvaW50KVxuXG4gIGFzc2VydC5kZWVwRXF1YWwodjEudG9KU09OKCksIHt4OjAseTowfSlcbiAgYXNzZXJ0LmRlZXBFcXVhbCh2Mi50b0pTT04oKSwge3g6MTAseTowfSlcbiAgYXNzZXJ0LmRlZXBFcXVhbCh2My50b0pTT04oKSwge3g6MCx5OjEwfSlcbiAgYXNzZXJ0LmRlZXBFcXVhbCh2NC50b0pTT04oKSwge3g6MSx5OjJ9KVxufSlcbiJdfQ==