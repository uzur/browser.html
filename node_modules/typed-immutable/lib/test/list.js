(function (factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./test", "immutable", "../record", "../list", "../typed"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./test"), require("immutable"), require("../record"), require("../list"), require("../typed"));
  }
})(function (exports, _test, _immutable, _record, _list, _typed) {
  "use strict";

  var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

  var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

  var test = _test["default"];
  var Immutable = _immutable;
  var Record = _record.Record;
  var List = _list.List;
  var Typed = _typed.Typed;
  var Union = _typed.Union;
  var Maybe = _typed.Maybe;

  var NumberList = List(Number);
  var StringList = List(String);
  var Point = Record({ x: Number(0),
    y: Number(0) }, "Point");

  var Points = List(Point, "Points");

  var isUpperCase = function (x) {
    return x.toUpperCase() === x;
  };
  var upperCase = function (x) {
    return x.toUpperCase();
  };
  var inc = function (x) {
    return x + 1;
  };
  var isEvent = function (x) {
    return x % 2 === 0;
  };
  var sum = function (x, y) {
    return x + y;
  };
  var concat = function (xs, ys) {
    return xs.concat(ys);
  };

  test("typed list creation", function (assert) {

    assert.throws(function (_) {
      return List();
    }, /Typed.List must be passed a type descriptor/);

    assert.throws(function (_) {
      return List({});
    }, /Typed.List was passed an invalid type descriptor:/);
  });

  test("number list", function (assert) {
    var ns1 = NumberList();
    assert.ok(ns1 instanceof Immutable.List);
    assert.ok(ns1 instanceof List);
    assert.ok(ns1 instanceof NumberList);
    assert.equal(ns1.size, 0);

    var ns2 = ns1.push(5);
    assert.ok(ns1 instanceof Immutable.List);
    assert.ok(ns1 instanceof List);
    assert.ok(ns1 instanceof NumberList);
    assert.equal(ns2.size, 1);
    assert.equal(ns2.get(0), 5);
    assert.equal(ns2.first(), 5);
    assert.equal(ns2.last(), 5);
  });

  test("empty record list", function (assert) {
    var v = Points();

    assert.ok(v instanceof Immutable.List);
    assert.ok(v instanceof List);
    assert.ok(v instanceof Points);

    assert.equal(v.size, 0);
  });

  test("make list as function call", function (assert) {
    var v = Points([{ x: 1 }]);

    assert.ok(v instanceof Immutable.List);
    assert.ok(v instanceof List);
    assert.ok(v instanceof Points);

    assert.equal(v.size, 1);

    assert.ok(v.get(0) instanceof Record);
    assert.ok(v.get(0) instanceof Point);
    assert.deepEqual(v.toJSON(), [{ x: 1, y: 0 }]);
  });

  test("make list of records", function (assert) {
    var v = Points.of({ x: 10 }, { x: 15 }, { x: 17 });
    assert.ok(v instanceof Immutable.List);
    assert.ok(v instanceof List);
    assert.ok(v instanceof Points);

    assert.equal(v.size, 3);

    assert.ok(v.get(0) instanceof Record);
    assert.ok(v.get(0) instanceof Point);

    assert.ok(v.get(1) instanceof Record);
    assert.ok(v.get(1) instanceof Point);

    assert.ok(v.get(2) instanceof Record);
    assert.ok(v.get(2) instanceof Point);

    assert.deepEqual(v.toJSON(), [{ x: 10, y: 0 }, { x: 15, y: 0 }, { x: 17, y: 0 }]);
  });

  test("make list with new", function (assert) {
    var v = new Points([{ x: 3 }]);

    assert.ok(v instanceof Immutable.List);
    assert.ok(v instanceof List);
    assert.ok(v instanceof Points);

    assert.equal(v.size, 1);

    assert.ok(v.get(0) instanceof Record);
    assert.ok(v.get(0) instanceof Point);
    assert.deepEqual(v.toJSON(), [{ x: 3, y: 0 }]);
  });

  test("toString on typed list", function (assert) {
    var points = Points.of({ x: 10 }, { y: 2 });
    var numbers = NumberList.of(1, 2, 3);
    var strings = StringList.of("hello", "world");

    assert.equal(points.toString(), "Points([ Point({ \"x\": 10, \"y\": 0 }), Point({ \"x\": 0, \"y\": 2 }) ])");

    assert.equal(numbers.toString(), "Typed.List(Number)([ 1, 2, 3 ])");

    assert.equal(strings.toString(), "Typed.List(String)([ \"hello\", \"world\" ])");
  });

  test("create list from entries", function (assert) {
    var ns1 = NumberList.of(1, 2, 3, 4);
    assert.equal(ns1.toString(), "Typed.List(Number)([ 1, 2, 3, 4 ])");
    assert.equal(ns1[Typed.typeName](), "Typed.List(Number)");

    assert.deepEqual(ns1.toJSON(), [1, 2, 3, 4]);
  });

  test("converts sequences to list", function (assert) {
    var seq = Immutable.Seq([{ x: 1 }, { x: 2 }]);
    var v = Points(seq);

    assert.ok(v instanceof Immutable.List);
    assert.ok(v instanceof List);
    assert.ok(v instanceof Points);

    assert.equal(v.size, 2);

    assert.ok(v.get(0) instanceof Record);
    assert.ok(v.get(0) instanceof Point);
    assert.ok(v.get(1) instanceof Record);
    assert.ok(v.get(1) instanceof Point);

    assert.deepEqual(v.toJSON(), [{ x: 1, y: 0 }, { x: 2, y: 0 }]);
  });

  test("can be subclassed", function (assert) {
    var Graph = (function (_Points) {
      function Graph() {
        _classCallCheck(this, Graph);

        if (_Points != null) {
          _Points.apply(this, arguments);
        }
      }

      _inherits(Graph, _Points);

      _createClass(Graph, {
        foo: {
          value: function foo() {
            var first = this.first();
            var last = this.last();
            return last.x - first.x;
          }
        }
      });

      return Graph;
    })(Points);

    var v1 = new Graph([{ y: 3 }, { x: 7 }, { x: 9, y: 4 }]);

    assert.ok(v1 instanceof Immutable.List);
    assert.ok(v1 instanceof List);
    assert.ok(v1 instanceof Points);
    assert.ok(v1 instanceof Graph);

    assert.equal(v1.foo(), 9);
    assert.deepEqual(v1.toJSON(), [{ x: 0, y: 3 }, { x: 7, y: 0 }, { x: 9, y: 4 }]);

    var v2 = v1.set(0, { x: 2, y: 4 });

    assert.ok(v2 instanceof Immutable.List);
    assert.ok(v2 instanceof List);
    assert.ok(v2 instanceof Points);
    assert.ok(v2 instanceof Graph);

    assert.equal(v2.foo(), 7);
    assert.deepEqual(v2.toJSON(), [{ x: 2, y: 4 }, { x: 7, y: 0 }, { x: 9, y: 4 }]);
  });

  test("short-circuits if already a list", function (assert) {
    var v1 = Points.of({ x: 2, y: 4 }, { x: 8, y: 3 });

    assert.equal(v1, Points(v1));

    assert.equal(v1, new Points(v1));

    var OtherPoints = List(Point);

    assert.ok(OtherPoints(v1) instanceof OtherPoints);
    assert.notOk(OtherPoints(v1) instanceof Points);
    assert.notEqual(v1, OtherPoints(v1));
    assert.ok(v1.equals(OtherPoints(v1)));

    assert.ok(new OtherPoints(v1) instanceof OtherPoints);
    assert.notOk(new OtherPoints(v1) instanceof Points);
    assert.notEqual(v1, new OtherPoints(v1));
    assert.ok(v1.equals(new OtherPoints(v1)));

    var SubPoints = (function (_Points) {
      function SubPoints() {
        _classCallCheck(this, SubPoints);

        if (_Points != null) {
          _Points.apply(this, arguments);
        }
      }

      _inherits(SubPoints, _Points);

      _createClass(SubPoints, {
        head: {
          value: function head() {
            return this.first();
          }
        }
      });

      return SubPoints;
    })(Points);

    assert.notEqual(v1, new SubPoints(v1));
    assert.ok(v1.equals(new SubPoints(v1)));

    assert.equal(new SubPoints(v1).head(), v1.first());
  });

  test("can be cleared", function (assert) {
    var v1 = Points.of({ x: 1 }, { x: 2 }, { x: 3 });
    var v2 = v1.clear();

    assert.ok(v1 instanceof Points);
    assert.ok(v2 instanceof Points);

    assert.equal(v1.size, 3);
    assert.equal(v2.size, 0);

    assert.deepEqual(v1.toJSON(), [{ x: 1, y: 0 }, { x: 2, y: 0 }, { x: 3, y: 0 }]);

    assert.deepEqual(v2.toJSON(), []);

    assert.equal(v2.first(), void 0);
  });

  test("can construct records", function (assert) {
    var v1 = Points();
    var v2 = v1.push({ x: 1 });
    var v3 = v2.push({ y: 2 });
    var v4 = v3.push({ x: 3, y: 3 });
    var v5 = v4.push(void 0);

    assert.ok(v1 instanceof Points);
    assert.ok(v2 instanceof Points);
    assert.ok(v3 instanceof Points);
    assert.ok(v4 instanceof Points);
    assert.ok(v5 instanceof Points);

    assert.equal(v1.size, 0);
    assert.equal(v2.size, 1);
    assert.equal(v3.size, 2);
    assert.equal(v4.size, 3);
    assert.equal(v5.size, 4);

    assert.deepEqual(v1.toJSON(), []);
    assert.deepEqual(v2.toJSON(), [{ x: 1, y: 0 }]);
    assert.deepEqual(v3.toJSON(), [{ x: 1, y: 0 }, { x: 0, y: 2 }]);
    assert.deepEqual(v4.toJSON(), [{ x: 1, y: 0 }, { x: 0, y: 2 }, { x: 3, y: 3 }]);
    assert.deepEqual(v5.toJSON(), [{ x: 1, y: 0 }, { x: 0, y: 2 }, { x: 3, y: 3 }, { x: 0, y: 0 }]);
  });

  test("can update sub-records", function (assert) {
    var v1 = Points.of({ x: 4 }, { y: 4 });
    var v2 = v1.setIn([0, "y"], 5);
    var v3 = v2.set(2, void 0);
    var v4 = v3.setIn([1, "y"], void 0);

    assert.ok(v1 instanceof Points);
    assert.ok(v2 instanceof Points);
    assert.ok(v3 instanceof Points);
    assert.ok(v4 instanceof Points);

    assert.equal(v1.size, 2);
    assert.equal(v2.size, 2);
    assert.equal(v3.size, 3);
    assert.equal(v4.size, 3);

    assert.deepEqual(v1.toJSON(), [{ x: 4, y: 0 }, { x: 0, y: 4 }]);

    assert.deepEqual(v2.toJSON(), [{ x: 4, y: 5 }, { x: 0, y: 4 }]);

    assert.deepEqual(v3.toJSON(), [{ x: 4, y: 5 }, { x: 0, y: 4 }, { x: 0, y: 0 }]);

    assert.deepEqual(v4.toJSON(), [{ x: 4, y: 5 }, { x: 0, y: 0 }, { x: 0, y: 0 }]);
  });

  test("serialize & parse", function (assert) {
    var ns1 = NumberList.of(1, 2, 3, 4);

    assert.ok(NumberList(ns1.toJSON()).equals(ns1), "parsing serialized typed list");

    assert.ok(ns1.constructor(ns1.toJSON()).equals(ns1), "parsing with constructor");
  });

  test("serialize & parse nested", function (assert) {
    var v1 = Points.of({ x: 1 }, { x: 2 }, { y: 3 });

    assert.ok(Points(v1.toJSON()).equals(v1));
    assert.ok(v1.constructor(v1.toJSON()).equals(v1));
    assert.ok(v1.equals(new Points(v1.toJSON())));

    assert.ok(Points(v1.toJSON()).get(0) instanceof Point);
  });

  test("construct with array", function (assert) {
    var ns1 = NumberList([1, 2, 3, 4, 5]);

    assert.ok(ns1 instanceof NumberList);
    assert.ok(ns1.size, 5);
    assert.equal(ns1.get(0), 1);
    assert.equal(ns1.get(1), 2);
    assert.equal(ns1.get(2), 3);
    assert.equal(ns1.get(3), 4);
    assert.equal(ns1.get(4), 5);
  });

  test("construct with indexed seq", function (assert) {
    var seq = Immutable.Seq([1, 2, 3]);
    var ns1 = NumberList(seq);

    assert.ok(ns1 instanceof NumberList);
    assert.ok(ns1.size, 3);
    assert.equal(ns1.get(0), 1);
    assert.equal(ns1.get(1), 2);
    assert.equal(ns1.get(2), 3);
  });

  test("does not construct form a scalar", function (assert) {
    assert.throws(function (_) {
      return NumberList(3);
    }, /Expected Array or iterable object of values/);
  });

  test("can not construct with invalid data", function (assert) {
    var Point = Record({ x: Number, y: Number }, "Point");
    var Points = List(Point, "Points");

    assert.throws(function (_) {
      return Points.of({ x: 1, y: 0 }, { y: 2, x: 2 }, { x: 3 });
    }, /"undefined" is not a number/);
  });

  test("set and get a value", function (assert) {
    var ns = NumberList();
    var ns2 = ns.set(0, 7);

    assert.equal(ns.size, 0);
    assert.equal(ns.count(), 0);
    assert.equal(ns.get(0), void 0);

    assert.equal(ns2.size, 1);
    assert.equal(ns2.count(), 1);
    assert.equal(ns2.get(0), 7);
  });

  test("set and get records", function (assert) {
    var v1 = Points();
    var v2 = v1.set(0, { x: 7 });

    assert.equal(v1.size, 0);
    assert.equal(v1.count(), 0);
    assert.equal(v1.get(0), void 0);

    assert.equal(v2.size, 1);
    assert.equal(v2.count(), 1);
    assert.ok(v2.get(0) instanceof Point);
    assert.ok(v2.get(0).toJSON(), { x: 7, y: 0 });
  });

  test("can not set invalid value", function (assert) {
    var ns = NumberList();

    assert.throws(function (_) {
      return ns.set(0, "foo");
    }, /"foo" is not a number/);

    assert.equal(ns.size, 0);
  });

  test("can not set invalid structure", function (assert) {
    var v = Points();

    assert.throws(function (_) {
      return v.set(0, 5);
    }, /Invalid data structure/);
  });

  test("can not set undeclared fields", function (assert) {
    var v = Points.of({ x: 9 });

    assert.throws(function (_) {
      return v.setIn([0, "d"], 4);
    }, /Cannot set unknown field "d"/);
  });

  test("counts from the end of the list on negative index", function (assert) {
    var ns = NumberList.of(1, 2, 3, 4, 5, 6, 7);
    assert.equal(ns.get(-1), 7);
    assert.equal(ns.get(-5), 3);
    assert.equal(ns.get(-9), void 0);
    assert.equal(ns.get(-999, 1000), 1000);
  });

  test("coerces numeric-string keys", function (assert) {
    // Of course, TypeScript protects us from this, so cast to "any" to test.
    var ns = NumberList.of(1, 2, 3, 4, 5, 6);

    assert.equal(ns.get("1"), 2);
    assert.equal(ns.get("-1"), 6);
    assert.equal(ns.set("3", 10).get("-3"), 10);
  });

  test("setting creates a new instance", function (assert) {
    var v1 = NumberList.of(1);
    var v2 = v1.set(0, 15);

    assert.equal(v1.get(0), 1);
    assert.equal(v2.get(0), 15);

    assert.ok(v1 instanceof NumberList);
    assert.ok(v2 instanceof NumberList);
  });

  test("size includes the highest index", function (assert) {
    var v0 = NumberList();
    var v1 = v0.set(0, 1);
    var v2 = v1.set(1, 2);
    var v3 = v2.set(2, 3);

    assert.equal(v0.size, 0);
    assert.equal(v1.size, 1);
    assert.equal(v2.size, 2);
    assert.equal(v3.size, 3);

    assert.ok(v0 instanceof NumberList);
    assert.ok(v1 instanceof NumberList);
    assert.ok(v2 instanceof NumberList);
    assert.ok(v3 instanceof NumberList);
  });

  test("get helpers make for easier to read code", function (assert) {
    var v1 = NumberList.of(1, 2, 3);

    assert.equal(v1.first(), 1);
    assert.equal(v1.get(1), 2);
    assert.equal(v1.last(), 3);
  });

  test("slice helpers make for easier to read code", function (assert) {
    var v0 = NumberList.of(1, 2, 3);
    var v1 = NumberList.of(1, 2);
    var v2 = NumberList.of(1);
    var v3 = NumberList();

    assert.deepEqual(v0.rest().toArray(), [2, 3]);
    assert.ok(v0.rest() instanceof NumberList);
    assert.deepEqual(v0.butLast().toArray(), [1, 2]);
    assert.ok(v0.butLast() instanceof NumberList);

    assert.deepEqual(v1.rest().toArray(), [2]);
    assert.ok(v1.rest() instanceof NumberList);
    assert.deepEqual(v1.butLast().toArray(), [1]);
    assert.ok(v1.butLast() instanceof NumberList);

    assert.deepEqual(v2.rest().toArray(), []);
    assert.ok(v2.rest() instanceof NumberList);
    assert.deepEqual(v2.butLast().toArray(), []);
    assert.ok(v2.butLast() instanceof NumberList);

    assert.deepEqual(v3.rest().toArray(), []);
    assert.ok(v3.rest() instanceof NumberList);
    assert.deepEqual(v3.butLast().toArray(), []);
    assert.ok(v3.butLast() instanceof NumberList);
  });

  test("can set at with in the bonds", function (assert) {
    var v0 = NumberList.of(1, 2, 3);
    var v1 = v0.set(1, 20); // within existing tail
    var v2 = v1.set(3, 30); // at last position

    assert.throws(function (_) {
      return v1.set(4, 4);
    }, /Index "4" is out of bound/);
    assert.throws(function (_) {
      return v2.set(31, 31);
    }, /Index "31" is out of bound/);

    assert.equal(v2.size, v1.size + 1);

    assert.deepEqual(v0.toArray(), [1, 2, 3]);
    assert.deepEqual(v1.toArray(), [1, 20, 3]);
    assert.deepEqual(v2.toArray(), [1, 20, 3, 30]);

    assert.ok(v0 instanceof NumberList);
    assert.ok(v1 instanceof NumberList);
    assert.ok(v2 instanceof NumberList);
  });

  test("can contain a large number of indices", function (assert) {
    var input = Immutable.Range(0, 20000);
    var numbers = NumberList(input);
    var iterations = 0;

    assert.ok(numbers.every(function (value) {
      var result = value === iterations;
      iterations = iterations + 1;
      return result;
    }));
  });

  test("push inserts at highest index", function (assert) {
    var v0 = NumberList.of(1, 2, 3);
    var v1 = v0.push(4, 5, 6);

    assert.ok(v0 instanceof NumberList);
    assert.ok(v1 instanceof NumberList);

    assert.equal(v0.size, 3);
    assert.equal(v1.size, 6);

    assert.deepEqual(v0.toArray(), [1, 2, 3]);
    assert.deepEqual(v1.toArray(), [1, 2, 3, 4, 5, 6]);
  });

  test("pop removes the highest index, decrementing size", function (assert) {
    var v0 = NumberList.of(1, 2, 3);
    var v1 = v0.pop();
    var v2 = v1.push(4);

    assert.equal(v0.last(), 3);
    assert.equal(v0.size, 3);
    assert.deepEqual(v0.toArray(), [1, 2, 3]);

    assert.ok(v1 instanceof NumberList);
    assert.equal(v1.last(), 2);
    assert.equal(v1.size, 2);
    assert.deepEqual(v1.toArray(), [1, 2]);

    assert.ok(v2 instanceof NumberList);
    assert.equal(v2.last(), 4);
    assert.equal(v2.size, 3);
    assert.deepEqual(v2.toArray(), [1, 2, 4]);
  });

  test("pop on empty", function (assert) {
    var v0 = NumberList.of(1);
    var v1 = v0.pop();
    var v2 = v1.pop();
    var v3 = v2.pop();
    var v4 = v3.pop();
    var v5 = v4.pop();

    assert.equal(v0.size, 1);
    assert.deepEqual(v0.toArray(), [1]);

    ![v1, v2, v3, v4, v5].forEach(function (v) {
      assert.ok(v instanceof NumberList);
      assert.equal(v.size, 0);
      assert.deepEqual(v.toArray(), []);
    });
  });

  test("test removes any index", function (assert) {
    var v0 = NumberList.of(1, 2, 3);
    var v1 = v0.remove(2);
    var v2 = v1.remove(0);
    var v3 = v2.remove(9);
    var v4 = v0.remove(3);
    var v5 = v3.push(5);

    assert.ok(v0 instanceof NumberList);
    assert.ok(v1 instanceof NumberList);
    assert.ok(v2 instanceof NumberList);
    assert.ok(v3 instanceof NumberList);
    assert.ok(v4 instanceof NumberList);
    assert.ok(v5 instanceof NumberList);

    assert.equal(v0.size, 3);
    assert.equal(v1.size, 2);
    assert.equal(v2.size, 1);
    assert.equal(v3.size, 1);
    assert.equal(v4.size, 3);
    assert.equal(v5.size, 2);

    assert.deepEqual(v0.toArray(), [1, 2, 3]);
    assert.deepEqual(v1.toArray(), [1, 2]);
    assert.deepEqual(v2.toArray(), [2]);
    assert.deepEqual(v3.toArray(), [2]);
    assert.deepEqual(v4.toArray(), [1, 2, 3]);
    assert.deepEqual(v5.toArray(), [2, 5]);
  });

  test("shift removes from the front", function (assert) {
    var v0 = NumberList.of(1, 2, 3);
    var v1 = v0.shift();

    assert.ok(v0 instanceof NumberList);
    assert.ok(v1 instanceof NumberList);

    assert.deepEqual(v0.toArray(), [1, 2, 3]);
    assert.deepEqual(v1.toArray(), [2, 3]);

    assert.equal(v0.first(), 1);
    assert.equal(v1.first(), 2);

    assert.equal(v0.size, 3);
    assert.equal(v1.size, 2);
  });

  test("unshift insert items in the front", function (assert) {
    var v0 = NumberList.of(1, 2, 3);
    var v1 = v0.unshift(11, 12, 13);

    assert.ok(v0 instanceof NumberList);
    assert.ok(v1 instanceof NumberList);

    assert.deepEqual(v0.toArray(), [1, 2, 3]);
    assert.deepEqual(v1.toArray(), [11, 12, 13, 1, 2, 3]);

    assert.equal(v0.first(), 1);
    assert.equal(v1.first(), 11);

    assert.equal(v0.size, 3);
    assert.equal(v1.size, 6);
  });

  test("finds values using indexOf", function (assert) {
    var v = NumberList.of(1, 2, 3, 2, 1);

    assert.equal(v.indexOf(2), 1);
    assert.equal(v.indexOf(3), 2);
    assert.equal(v.indexOf(4), -1);
  });

  test("finds values using findIndex", function (assert) {
    var v = StringList.of("a", "b", "c", "B", "a");

    assert.equal(v.findIndex(isUpperCase), 3);
    assert.equal(v.findIndex(function (x) {
      return x.length > 1;
    }), -1);
  });

  test("finds values using findEntry", function (assert) {
    var v = StringList.of("a", "b", "c", "B", "a");

    assert.deepEqual(v.findEntry(isUpperCase), [3, "B"]);
    assert.equal(v.findEntry(function (x) {
      return x.length > 1;
    }), void 0);
  });

  test("maps values", function (assert) {
    var v0 = NumberList.of(1, 2, 3);
    var v1 = v0.map(inc);

    assert.ok(v0 instanceof NumberList);
    assert.ok(v1 instanceof NumberList);
    assert.ok(v1 instanceof Immutable.List);

    assert.equal(v0.size, 3);
    assert.equal(v1.size, 3);

    assert.deepEqual(v0.toArray(), [1, 2, 3]);
    assert.deepEqual(v1.toArray(), [2, 3, 4]);
  });

  test("maps records to any", function (assert) {
    var v0 = Points.of({ x: 1 }, { y: 2 }, { x: 3, y: 3 });
    var v1 = v0.map(function (_ref) {
      var x = _ref.x;
      var y = _ref.y;
      return { x: x + 1, y: y * y };
    });

    assert.ok(v0 instanceof Points);
    assert.notOk(v1 instanceof Points);
    assert.ok(v1 instanceof Immutable.List);
    assert.equal(v1[Typed.typeName](), "Typed.List(Any)");

    assert.equal(v0.size, 3);
    assert.equal(v1.size, 3);

    assert.deepEqual(v0.toJSON(), [{ x: 1, y: 0 }, { x: 0, y: 2 }, { x: 3, y: 3 }]);

    assert.deepEqual(v1.toJSON(), [{ x: 2, y: 0 }, { x: 1, y: 4 }, { x: 4, y: 9 }]);
  });

  test("maps records to records", function (assert) {
    var v0 = Points.of({ x: 1 }, { y: 2 }, { x: 3, y: 3 });
    var v1 = v0.map(function (point) {
      return point.update("x", inc).update("y", inc);
    });

    assert.ok(v0 instanceof Points);
    assert.ok(v1 instanceof Points);
    assert.ok(v1 instanceof Immutable.List);

    assert.equal(v0.size, 3);
    assert.equal(v1.size, 3);

    assert.deepEqual(v0.toJSON(), [{ x: 1, y: 0 }, { x: 0, y: 2 }, { x: 3, y: 3 }]);

    assert.deepEqual(v1.toJSON(), [{ x: 2, y: 1 }, { x: 1, y: 3 }, { x: 4, y: 4 }]);
  });

  test("filters values", function (assert) {
    var v0 = NumberList.of(1, 2, 3, 4, 5, 6);
    var v1 = v0.filter(isEvent);

    assert.ok(v0 instanceof NumberList);
    assert.ok(v1 instanceof NumberList);

    assert.equal(v0.size, 6);
    assert.equal(v1.size, 3);

    assert.deepEqual(v0.toArray(), [1, 2, 3, 4, 5, 6]);
    assert.deepEqual(v1.toArray(), [2, 4, 6]);
  });

  test("reduces values", function (assert) {
    var v = NumberList.of(1, 10, 100);

    assert.equal(v.reduce(sum), 111);
    assert.equal(v.reduce(sum, 1000), 1111);

    assert.ok(v instanceof NumberList);
    assert.deepEqual(v.toArray(), [1, 10, 100]);
  });

  test("reduces from the right", function (assert) {
    var v = StringList.of("a", "b", "c");

    assert.equal(v.reduceRight(concat), "cba");
    assert.equal(v.reduceRight(concat, "seeded"), "seededcba");

    assert.ok(v instanceof StringList);
    assert.deepEqual(v.toArray(), ["a", "b", "c"]);
  });

  test("takes and skips values", function (assert) {
    var v0 = NumberList.of(1, 2, 3, 4, 5, 6);
    var v1 = v0.skip(2);
    var v2 = v1.take(2);

    assert.ok(v0 instanceof NumberList);
    assert.ok(v1 instanceof NumberList);
    assert.ok(v2 instanceof NumberList);

    assert.equal(v0.size, 6);
    assert.equal(v1.size, 4);
    assert.equal(v2.size, 2);

    assert.deepEqual(v0.toArray(), [1, 2, 3, 4, 5, 6]);
    assert.deepEqual(v1.toArray(), [3, 4, 5, 6]);
    assert.deepEqual(v2.toArray(), [3, 4]);
  });

  test("efficiently chains array methods", function (assert) {
    var v = NumberList.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);

    assert.equal(v.filter(function (x) {
      return x % 2 == 0;
    }).skip(2).map(function (x) {
      return x * x;
    }).take(3).reduce(function (a, b) {
      return a + b;
    }, 0), 200);

    assert.ok(v instanceof NumberList);
    assert.equal(v.size, 14);
    assert.deepEqual(v.toArray(), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);
  });

  test("convert to map", function (assert) {
    var v = StringList.of("a", "b", "c");
    var m = v.toMap();

    assert.ok(v instanceof StringList);
    assert.equal(v.size, 3);
    assert.deepEqual(v.toArray(), ["a", "b", "c"]);

    assert.equal(m.size, 3);
    assert.equal(m.get(1), "b");
  });

  test("reverses", function (assert) {
    var v0 = StringList.of("a", "b", "c");
    var v1 = v0.reverse();

    assert.ok(v0 instanceof StringList);
    assert.ok(v1 instanceof StringList);

    assert.equal(v0.size, 3);
    assert.equal(v1.size, 3);

    assert.deepEqual(v0.toArray(), ["a", "b", "c"]);
    assert.deepEqual(v1.toArray(), ["c", "b", "a"]);
  });

  test("ensures equality", function (assert) {
    // Make a sufficiently long list.
    var array = Array(100).join("abcdefghijklmnopqrstuvwxyz").split("");

    var v1 = StringList(array);
    var v2 = StringList(array);

    assert.ok(v1 != v2);
    assert.ok(v1.equals(v2));
  });

  test("concat works like Array.prototype.concat", function (assert) {
    var v1 = NumberList.of(1, 2, 3);
    var v2 = v1.concat(4, NumberList.of(5, 6), [7, 8], Immutable.Seq({ a: 9, b: 10 }), Immutable.Set.of(11, 12));

    assert.ok(v1 instanceof NumberList);
    assert.ok(v2 instanceof NumberList);

    assert.equal(v1.size, 3);
    assert.equal(v2.size, 12);

    assert.deepEqual(v1.toArray(), [1, 2, 3]);
    assert.deepEqual(v2.toArray(), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);
  });

  test("allows chained mutations", function (assert) {
    var v1 = NumberList();
    var v2 = v1.push(1);
    var v3 = v2.withMutations(function (v) {
      return v.push(2).push(3).push(4);
    });
    var v4 = v3.push(5);

    assert.ok(v1 instanceof NumberList);
    assert.ok(v2 instanceof NumberList);
    assert.ok(v3 instanceof NumberList);
    assert.ok(v4 instanceof NumberList);

    assert.equal(v1.size, 0);
    assert.equal(v2.size, 1);
    assert.equal(v3.size, 4);
    assert.equal(v4.size, 5);

    assert.deepEqual(v1.toArray(), []);
    assert.deepEqual(v2.toArray(), [1]);
    assert.deepEqual(v3.toArray(), [1, 2, 3, 4]);
    assert.deepEqual(v4.toArray(), [1, 2, 3, 4, 5]);
  });

  test("allows chained mutations using alternative API", function (assert) {
    var v1 = NumberList();
    var v2 = v1.push(1);
    var v3 = v2.asMutable().push(2).push(3).push(4).asImmutable();
    var v4 = v3.push(5);

    assert.ok(v1 instanceof NumberList);
    assert.ok(v2 instanceof NumberList);
    assert.ok(v3 instanceof NumberList);
    assert.ok(v4 instanceof NumberList);

    assert.equal(v1.size, 0);
    assert.equal(v2.size, 1);
    assert.equal(v3.size, 4);
    assert.equal(v4.size, 5);

    assert.deepEqual(v1.toArray(), []);
    assert.deepEqual(v2.toArray(), [1]);
    assert.deepEqual(v3.toArray(), [1, 2, 3, 4]);
    assert.deepEqual(v4.toArray(), [1, 2, 3, 4, 5]);
  });

  test("allows size to be set", function (assert) {
    var input = Immutable.Range(0, 2000);
    var v1 = NumberList(input);
    var v2 = v1.setSize(1000);
    assert.throws(function (_) {
      return v2.setSize(1500);
    }, /setSize may only downsize/);
    var v3 = v2.setSize(1000);

    assert.ok(v1 instanceof NumberList);
    assert.ok(v2 instanceof NumberList);
    assert.ok(v3 instanceof NumberList);

    assert.equal(v1.size, 2000);
    assert.equal(v2.size, 1000);
    assert.equal(v3.size, 1000);

    assert.equal(v1.get(900), 900);
    assert.equal(v1.get(1300), 1300);
    assert.equal(v1.get(1800), 1800);

    assert.equal(v2.get(900), 900);
    assert.equal(v2.get(1300), void 0);
    assert.equal(v2.get(1800), void 0);

    assert.equal(v3.get(900), 900);
    assert.equal(v3.get(1300), void 0);
    assert.equal(v3.get(1800), void 0);

    assert.ok(v2.equals(v3));
  });

  test("can be efficiently sliced", function (assert) {
    var input = Immutable.Range(0, 2000);
    var v1 = NumberList(input);
    var v2 = v1.slice(100, -100);

    assert.ok(v1 instanceof NumberList);
    assert.ok(v2 instanceof NumberList);

    assert.equal(v1.size, 2000);
    assert.equal(v2.size, 1800);

    assert.equal(v2.first(), 100);
    assert.equal(v2.rest().size, 1799);
    assert.equal(v2.last(), 1899);
    assert.equal(v2.butLast().size, 1799);
  });
});
//# sourceMappingURL=data:application/json;base64,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QUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksS0FBSyxDQUFDLENBQUE7QUFDcEMsVUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtHQUMzQyxDQUFDLENBQUE7O0FBRUYsTUFBSSxDQUFDLHNCQUFzQixFQUFFLFVBQUEsTUFBTSxFQUFJO0FBQ3JDLFFBQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQTtBQUMzQyxVQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDdEMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksSUFBSSxDQUFDLENBQUE7QUFDNUIsVUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksTUFBTSxDQUFDLENBQUE7O0FBRTlCLFVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTs7QUFFdkIsVUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLE1BQU0sQ0FBQyxDQUFBO0FBQ3JDLFVBQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxLQUFLLENBQUMsQ0FBQTs7QUFFcEMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLE1BQU0sQ0FBQyxDQUFBO0FBQ3JDLFVBQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxLQUFL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RWxDLFVBQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUNaLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtHQUMvQixDQUFDLENBQUE7O0FBRUYsTUFBSSxDQUFDLDRCQUE0QixFQUFFLFVBQUEsTUFBTSxFQUFJO0FBQzNDLFFBQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7QUFDM0MsUUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBOztBQUVyQixVQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDdEMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksSUFBSSxDQUFDLENBQUE7QUFDNUIsVUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksTUFBTSxDQUFDLENBQUE7O0FBRTlCLFVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTs7QUFFdkIsVUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLE1BQU0sQ0FBQyxDQUFBO0FBQ3JDLFVBQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxLQUFLLENBQUMsQ0FBQTtBQUNwQyxVQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksTUFBTSxDQUFDLENBQUE7QUFDckMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLEtBQUssQ0FBQyxDQUFBOztBQUVwQyxVQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVB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LEVBQUUsWUFBWSxNQUFNLENBQUMsQ0FBQTtBQUMvQixVQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxNQUFNLENBQUMsQ0FBQTs7QUFFL0IsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ3hCLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUN4QixVQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDeEIsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ3hCLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTs7QUFFeEIsVUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDakMsVUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtBQUMzQyxVQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQ1YsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7QUFDM0MsVUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUNWLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQ1YsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7QUFDM0MsVUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUNWLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQ1YsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFDVixFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtHQUM1QyxDQUFDLENBQUE7O0FBRUYsTUFBSSxDQUFDLHdCQUF3QixFQUFFLFVBQUEsTUFBTSxFQUFJO0FBQ3ZDLFFBQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQTtBQUNwQyxRQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ2hDLFFBQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxBQUFDLENBQUMsQ0FBQTtBQUM3QixRQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxBQUFDLENBQUMsQ0FBQTs7QUFFdEMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksTUFBTSxDQUFDLENBQUE7QUFDL0IsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksTUFBTSxDQUFDLENBQUE7QUFDL0IsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksTUFBTSxDQUFDLENBQUE7QUFDL0IsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksTUFBTSxDQUFDLENBQUE7O0FBRS9CLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUN4QixVQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDeEIsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ3hCLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTs7QUFFeEIsVUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQ1gsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUNWLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBOztBQUU5QixVQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFDWCxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQ1YsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7O0FBRTlCLFVBQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUNYLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFDVixFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUNWLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBOztBQUU5QixVQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFDWCxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQ1YsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFDVixFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtHQUMvQixDQUFDLENBQUE7O0FBRUYsTUFBSSxDQUFDLG1CQUFtQixFQUFFLFVBQUEsTUFBTSxFQUFJO0FBQ2xDLFFBQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7O0FBRXJDLFVBQU0sQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFDcEMsK0JBQStCLENBQUMsQ0FBQTs7QUFFMUMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFDekMsMEJBQTBCLENBQUMsQ0FBQTtHQUN0QyxDQUFDLENBQUE7O0FBRUYsTUFBSSxDQUFDLDBCQUEwQixFQUFFLFVBQUEsTUFBTSxFQUFJO0FBQ3pDLFFBQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQTs7QUFFekMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDekMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ2pELFVBQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7O0FBRTdDLFVBQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxLQUFLLENBQUMsQ0FBQTtHQUN2RCxDQUFDLENBQUE7O0FBRUYsTUFBSSxDQUFDLHNCQUFzQixFQUFFLFVBQUEsTUFBTSxFQUFJO0FBQ3JDLFFBQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBOztBQUV2QyxVQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSxVQUFVLENBQUMsQ0FBQTtBQUNwQyxVQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDdEIsVUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQzNCLFVBQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUMzQixVQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDM0IsVUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQzNCLFVBQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtHQUM1QixDQUFDLENBQUE7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R0FBRyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBOztBQUUzQixVQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDeEIsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDM0IsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxBQUFDLENBQUMsQ0FBQTs7QUFFaEMsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ3hCLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQzNCLFVBQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxLQUFLLENBQUMsQ0FBQTtBQUNyQyxVQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBO0dBQzFDLENBQUMsQ0FBQTs7QUFFRixNQUFJLENBQUMsMkJBQTJCLEVBQUUsVUFBQSxNQUFNLEVBQUk7QUFDMUMsUUFBTSxFQUFFLEdBQUcsVUFBVSxFQUFFLENBQUE7O0FBRXZCLFVBQU0sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDO2FBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDO0tBQUEsRUFDckIsdUJBQXVCLENBQUMsQ0FBQTs7QUFFdEMsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFBO0dBQ3pCLENBQUMsQ0FBQTs7QUFFRixNQUFJLENBQUMsK0JBQStCLEVBQUUsVUFBQSxNQUFNLEVBQUk7QUFDOUMsUUFBTSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUE7O0FBRWxCLFVBQU0sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDO2FBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQUEsRUFDaEIsd0JBQXdCLENBQUMsQ0FBQTtHQUN4QyxDQUFDLENBQUE7O0FBRUYsTUFBSSxDQUFDLCtCQUErQixFQUFFLFVBQUEsTUFBTSxFQUFJO0FBQzlDLFFBQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQTs7QUFFM0IsVUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUM7YUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUFBLEVBQ3pCLDhCQUE4QixDQUFDLENBQUE7R0FDOUMsQ0FBQyxDQUFBOztBQUVGLE1BQUksQ0FBQyxtREFBbUQsRUFBRSxVQUFBLE1BQU0sRUFBSTtBQUNsRSxRQUFNLEVBQUUsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQzdDLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQzNCLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQzNCLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxBQUFDLENBQUMsQ0FBQTtBQUNqQyxVQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7R0FDdkMsQ0FBQyxDQUFBOztBQUVGLE1BQUksQ0FBQyw2QkFBNkIsRUFBRSxVQUFBLE1BQU0sRUFBSTs7QUFFNUMsUUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBOztBQUcxQyxVQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDNUIsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQzdCLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0dBQzVDLENBQUMsQ0FBQTs7QUFFRixNQUFJLENBQUMsZ0NBQWdDLEVBQUUsVUFBQSxNQUFNLEVBQUk7QUFDL0MsUUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUMzQixRQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTs7QUFFeEIsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQzFCLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTs7QUFFM0IsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksVUFBVSxDQUFDLENBQUE7QUFDbkMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksVUFBVSxDQUFDLENBQUE7R0FDcEMsQ0FBQyxDQUFBOztBQUVGLE1BQUksQ0FBQyxpQ0FBaUMsRUFBRSxVQUFBLE1BQU0sRUFBSTtBQUNoRCxRQUFNLEVBQUUsR0FBRyxVQUFVLEVBQUUsQ0FBQTtBQUN2QixRQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUN2QixRQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUN2QixRQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTs7QUFFdkIsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ3hCLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUN4QixVQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDeEIsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFBOztBQUV4QixVQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxVQUFVLENBQUMsQ0FBQTtBQUNuQyxVQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxVQUFVLENBQUMsQ0FBQTtBQUNuQyxVQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxVQUFVLENBQUMsQ0FBQTtBQUNuQyxVQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxVQUFVLENBQUMsQ0FBQTtHQUNwQyxDQUFDLENBQUE7O0FBRUYsTUFBSSxDQUFDLDBDQUEwQyxFQUFFLFVBQUEsTUFBTSxFQUFJO0FBQ3pELFFBQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTs7QUFFakMsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDM0IsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQzFCLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO0dBQzNCLENBQUMsQ0FBQTs7QUFFRixNQUFJLENBQUMsNENBQTRDLEVBQUUsVUFBQSxNQUFNLEVBQUk7QUFDM0QsUUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ2pDLFFBQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQzlCLFFBQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDM0IsUUFBTSxFQUFFLEdBQUcsVUFBVSxFQUFFLENBQUE7O0FBRXZCLFVBQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDOUMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLFlBQVksVUFBVSxDQUFDLENBQUE7QUFDMUMsVUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNoRCxVQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsWUFBWSxVQUFVLENBQUMsQ0FBQTs7QUFFN0MsVUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQzFDLFVBQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxZQUFZLFVBQVUsQ0FBQyxDQUFBO0FBQzFDLFVBQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUM3QyxVQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsWUFBWSxVQUFVLENBQUMsQ0FBQTs7QUFFN0MsVUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDekMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLFlBQVksVUFBVSxDQUFDLENBQUE7QUFDMUMsVUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDNUMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFlBQVksVUFBVSxDQUFDLENBQUE7O0FBRTdDLFVBQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQ3pDLFVBQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxZQUFZLFVBQVUsQ0FBQyxDQUFBO0FBQzFDLFVBQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQzVDLFVBQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxZQUFZLFVBQVUsQ0FBQyxDQUFBO0dBQzlDLENBQUMsQ0FBQTs7QUFFRixNQUFJLENBQUMsOEJBQThCLEVBQUUsVUFBQSxNQUFN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Q0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLFVBQVUsQ0FBQyxDQUFBO0FBQ2xDLFlBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUN2QixZQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtLQUNsQyxDQUFDLENBQUE7R0FDSCxDQUFDLENBQUE7O0FBRUYsTUFBSSxDQUFDLHdCQUF3QixFQUFFLFVBQUEsTUFBTSxFQUFJO0FBQ3ZDLFFBQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUNqQyxRQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3ZCLFFBQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDdkIsUUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN2QixRQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3ZCLFFBQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7O0FBR3JCLFVBQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZLFVBQVUsQ0FBQyxDQUFBO0FBQ25DLFVBQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZLFVBQVUsQ0FBQyxDQUFBO0FBQ25DLFVBQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZLFVBQVUsQ0FBQyxDQUFBO0FBQ25DLFVBQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZLFVBQVUsQ0FBQyxDQUFBO0FBQ25DLFVBQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZLFVBQVUsQ0FBQyxDQUFBO0FBQ25DLFVBQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZLFVBQVUsQ0FBQyxD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TUFBSSxDQUFDLHlCQUF5QixFQUFFLFVBQUEsTUFBTSxFQUFJO0FBQ3hDLFFBQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBO0FBQzlDLFFBQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBQSxLQUFLO2FBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQ2hCLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDO0tBQUEsQ0FBQyxDQUFBOztBQUVsRCxVQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxNQUFNLENBQUMsQ0FBQTtBQUMvQixVQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxNQUFNLENBQUMsQ0FBQTtBQUMvQixVQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7O0FBRXZDLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUN4QixVQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUE7O0FBRXhCLFVBQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUNYLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFDVixFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUNWLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBOztBQUU5QixVQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFDWCxDQUFD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QUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNyQixRQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7QUFDL0QsUUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTs7QUFFckIsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksVUFBVSxDQUFDLENBQUE7QUFDbkMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksVUFBVSxDQUFDLENBQUE7QUFDbkMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksVUFBVSxDQUFDLENBQUE7QUFDbkMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksVUFBVSxDQUFDLENBQUE7O0FBRW5DLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUN4QixVQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDeEIsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ3hCLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTs7QUFFeEIsVUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDbEMsVUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ25DLFVBQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN6QyxVQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0dBQzVDLENBQUMsQ0FBQTs7QUFFRixNQUFJLENBQUMsdUJBQXVCLEVBQUUsVUFBQSxNQUFNLEVBQUk7QUFDdEMsUUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDdEMsUUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzVCLFFBQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDM0IsVUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUM7YUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztLQUFBLEVBQ3JCLDJCQUEyQixDQUFDLENBQUE7QUFDMUMsUUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTs7QUFFM0IsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksVUFBVSxDQUFDLENBQUE7QUFDbkMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksVUFBVSxDQUFDLENBQUE7QUFDbkMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksVUFBVSxDQUFDLENBQUE7O0FBRW5DLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUMzQixVQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDM0IsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBOztBQUUzQixVQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFDOUIsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBO0FBQ2hDLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTs7QUFFaEMsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0FBQzlCLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsQUFBQyxDQUFDLENBQUE7QUFDbkMsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxBQUFDLENBQUMsQ0FBQTs7QUFFbkMsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0FBQzlCLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsQUFBQyxDQUFDLENBQUE7QUFDbkMsVUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxBQUFDLENBQUMsQ0FBQTs7QUFFbkMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7R0FDekIsQ0FBQyxDQUFBOztBQUVGLE1BQUksQ0FBQywyQkFBMkIsRUFBRSxVQUFBLE1BQU0sRUFBSTtBQUMxQyxRQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUN0QyxRQUFNLEVBQUUsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDNUIsUUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTs7QUFFN0IsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksVUFBVSxDQUFDLENBQUE7QUFDbkMsVUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksVUFBVSxDQUFDLENBQUE7O0FBRW5DLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUMzQixVQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7O0FBRTNCLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0FBQzdCLFVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUNsQyxVQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUM3QixVQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7R0FDdEMsQ0FBQyxDQUFBIiwiZmlsZSI6InNyYy90ZXN0L2xpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tIFwiLi90ZXN0XCJcbmltcG9ydCAqIGFzIEltbXV0YWJsZSBmcm9tIFwiaW1tdXRhYmxlXCJcbmltcG9ydCB7UmVjb3JkfSBmcm9tIFwiLi4vcmVjb3JkXCJcbmltcG9ydCB7TGlzdH0gZnJvbSBcIi4uL2xpc3RcIlxuaW1wb3J0IHtUeXBlZCwgVW5pb24sIE1heWJlfSBmcm9tIFwiLi4vdHlwZWRcIlxuXG5jb25zdCBOdW1iZXJMaXN0ID0gTGlzdChOdW1iZXIpXG5jb25zdCBTdHJpbmdMaXN0ID0gTGlzdChTdHJpbmcpXG5jb25zdCBQb2ludCA9IFJlY29yZCh7eDogTnVtYmVyKDApLFxuICAgICAgICAgICAgICAgICAgICAgIHk6IE51bWJlcigwKX0sXG4gICAgICAgICAgICAgICAgICAgICAnUG9pbnQnKVxuXG5jb25zdCBQb2ludHMgPSBMaXN0KFBvaW50LCAnUG9pbnRzJylcblxuY29uc3QgaXNVcHBlckNhc2UgPSB4ID0+IHgudG9VcHBlckNhc2UoKSA9PT0geFxuY29uc3QgdXBwZXJDYXNlID0geCA9PiB4LnRvVXBwZXJDYXNlKClcbmNvbnN0IGluYyA9IHggPT4geCArIDFcbmNvbnN0IGlzRXZlbnQgPSB4ID0+IHggJSAyID09PSAwXG5jb25zdCBzdW0gPSAoeCwgeSkgPT4geCArIHlcbmNvbnN0IGNvbmNhdCA9ICh4cywgeXMpID0+IHhzLmNvbmNhdCh5cylcblxudGVzdChcInR5cGVkIGxpc3QgY3JlYXRpb25cIiwgYXNzZXJ0ID0+IHtcblxuICBhc3NlcnQudGhyb3dzKF8gPT4gTGlzdCgpLFxuICAgICAgICAgICAgICAgIC9UeXBlZC5MaXN0IG11c3QgYmUgcGFzc2VkIGEgdHlwZSBkZXNjcmlwdG9yLylcblxuICBhc3NlcnQudGhyb3dzKF8gPT4gTGlzdCh7fSksXG4gICAgICAgICAgICAgICAgL1R5cGVkLkxpc3Qgd2FzIHBhc3NlZCBhbiBpbnZhbGlkIHR5cGUgZGVzY3JpcHRvcjovKVxufSlcblxudGVzdChcIm51bWJlciBsaXN0XCIsIGFzc2VydCA9PiB7XG4gIGNvbnN0IG5zMSA9IE51bWJlckxpc3QoKVxuICBhc3NlcnQub2sobnMxIGluc3RhbmNlb2YgSW1tdXRhYmxlLkxpc3QpXG4gIGFzc2VydC5vayhuczEgaW5zdGFuY2VvZiBMaXN0KVxuICBhc3NlcnQub2sobnMxIGluc3RhbmNlb2YgTnVtYmVyTGlzdClcbiAgYXNzZXJ0LmVxdWFsKG5zMS5zaXplLCAwKVxuXG4gIGNvbnN0IG5zMiA9IG5zMS5wdXNoKDUpXG4gIGFzc2VydC5vayhuczEgaW5zdGFuY2VvZiBJbW11dGFibGUuTGlzdClcbiAgYXNzZXJ0Lm9rKG5zMSBpbnN0YW5jZW9mIExpc3QpXG4gIGFzc2VydC5vayhuczEgaW5zdGFuY2VvZiBOdW1iZXJMaXN0KVxuICBhc3NlcnQuZXF1YWwobnMyLnNpemUsIDEpXG4gIGFzc2VydC5lcXVhbChuczIuZ2V0KDApLCA1KVxuICBhc3NlcnQuZXF1YWwobnMyLmZpcnN0KCksIDUpXG4gIGFzc2VydC5lcXVhbChuczIubGFzdCgpLCA1KVxufSlcblxudGVzdChcImVtcHR5IHJlY29yZCBsaXN0XCIsIGFzc2VydCA9PiB7XG4gIGNvbnN0IHYgPSBQb2ludHMoKVxuXG4gIGFzc2VydC5vayh2IGluc3RhbmNlb2YgSW1tdXRhYmxlLkxpc3QpXG4gIGFzc2VydC5vayh2IGluc3RhbmNlb2YgTGlzdClcbiAgYXNzZXJ0Lm9rKHYgaW5zdGFuY2VvZiBQb2ludHMpXG5cbiAgYXNzZXJ0LmVxdWFsKHYuc2l6ZSwgMClcblxuXG59KVxuXG50ZXN0KFwibWFrZSBsaXN0IGFzIGZ1bmN0aW9uIGNhbGxcIiwgYXNzZXJ0ID0+IHtcbiAgY29uc3QgdiA9IFBvaW50cyhbe3g6IDF9XSlcblxuICBhc3NlcnQub2sodiBpbnN0YW5jZW9mIEltbXV0YWJsZS5MaXN0KVxuICBhc3NlcnQub2sodiBpbnN0YW5jZW9mIExpc3QpXG4gIGFzc2VydC5vayh2IGluc3RhbmNlb2YgUG9pbnRzKVxuXG4gIGFzc2VydC5lcXVhbCh2LnNpemUsIDEpXG5cbiAgYXNzZXJ0Lm9rKHYuZ2V0KDApIGluc3RhbmNlb2YgUmVjb3JkKVxuICBhc3NlcnQub2sodi5nZXQoMCkgaW5zdGFuY2VvZiBQb2ludClcbiAgYXNzZXJ0LmRlZXBFcXVhbCh2LnRvSlNPTigpLCBbe3g6MSwgeTowfV0pXG59KVxuXG50ZXN0KFwibWFrZSBsaXN0IG9mIHJlY29yZHNcIiwgYXNzZXJ0ID0+IHtcbiAgY29uc3QgdiA9IFBvaW50cy5vZih7eDoxMH0sIHt4OjE1fSwge3g6MTd9KVxuICBhc3NlcnQub2sodiBpbnN0YW5jZW9mIEltbXV0YWJsZS5MaXN0KVxuICBhc3NlcnQub2sodiBpbnN0YW5jZW9mIExpc3QpXG4gIGFzc2VydC5vayh2IGluc3RhbmNlb2YgUG9pbnRzKVxuXG4gIGFzc2VydC5lcXVhbCh2LnNpemUsIDMpXG5cbiAgYXNzZXJ0Lm9rKHYuZ2V0KDApIGluc3RhbmNlb2YgUmVjb3JkKVxuICBhc3NlcnQub2sodi5nZXQoMCkgaW5zdGFuY2VvZiBQb2ludClcblxuICBhc3NlcnQub2sodi5nZXQoMSkgaW5zdGFuY2VvZiBSZWNvcmQpXG4gIGFzc2VydC5vayh2LmdldCgxKSBpbnN0YW5jZW9mIFBvaW50KVxuXG4gIGFzc2VydC5vayh2LmdldCgyKSBpbnN0YW5jZW9mIFJlY29yZClcbiAgYXNzZXJ0Lm9rKHYuZ2V0KDIpIGluc3RhbmNlb2YgUG9pbnQpXG5cbiAgYXNzZXJ0LmRlZXBFcXVhbCh2LnRvSlNPTigpLCBbe3g6MTAsIHk6MH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt4OjE1LCB5OjB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eDoxNywgeTowfV0pXG59KVxuXG50ZXN0KFwibWFrZSBsaXN0IHdpdGggbmV3XCIsIGFzc2VydCA9PiB7XG4gIGNvbnN0IHYgPSBuZXcgUG9pbnRzKFt7eDogM31dKVxuXG4gIGFzc2VydC5vayh2IGluc3RhbmNlb2YgSW1tdXRhYmxlLkxpc3QpXG4gIGFzc2VydC5vayh2IGluc3RhbmNlb2YgTGlzdClcbiAgYXNzZXJ0Lm9rKHYgaW5zdGFuY2VvZiBQb2ludHMpXG5cbiAgYXNzZXJ0LmVxdWFsKHYuc2l6ZSwgMSlcblxuICBhc3NlcnQub2sodi5nZXQoMCkgaW5zdGFuY2VvZiBSZWNvcmQpXG4gIGFzc2VydC5vayh2LmdldCgwKSBpbnN0YW5jZW9mIFBvaW50KVxuICBhc3NlcnQuZGVlcEVxdWFsKHYudG9KU09OKCksIFt7eDozLCB5OjB9XSlcbn0pXG5cbnRlc3QoXCJ0b1N0cmluZyBvbiB0eXBlZCBsaXN0XCIsIGFzc2VydCA9PiB7XG4gIGNvbnN0IHBvaW50cyA9IFBvaW50cy5vZih7eDogMTB9LCB7eTogMn0pXG4gIGNvbnN0IG51bWJlcnMgPSBOdW1iZXJMaXN0Lm9mKDEsIDIsIDMpXG4gIGNvbnN0IHN0cmluZ3MgPSBTdHJpbmdMaXN0Lm9mKFwiaGVsbG9cIiwgXCJ3b3JsZFwiKVxuXG4gIGFzc2VydC5lcXVhbChwb2ludHMudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgIGBQb2ludHMoWyBQb2ludCh7IFwieFwiOiAxMCwgXCJ5XCI6IDAgfSksIFBvaW50KHsgXCJ4XCI6IDAsIFwieVwiOiAyIH0pIF0pYClcblxuICBhc3NlcnQuZXF1YWwobnVtYmVycy50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgYFR5cGVkLkxpc3QoTnVtYmVyKShbIDEsIDIsIDMgXSlgKVxuXG4gIGFzc2VydC5lcXVhbChzdHJpbmdzLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICBgVHlwZWQuTGlzdChTdHJpbmcpKFsgXCJoZWxsb1wiLCBcIndvcmxkXCIgXSlgKVxufSlcblxudGVzdChcImNyZWF0ZSBsaXN0IGZyb20gZW50cmllc1wiLCBhc3NlcnQgPT4ge1xuICBjb25zdCBuczEgPSBOdW1iZXJMaXN0Lm9mKDEsIDIsIDMsIDQpXG4gIGFzc2VydC5lcXVhbChuczEudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgIFwiVHlwZWQuTGlzdChOdW1iZXIpKFsgMSwgMiwgMywgNCBdKVwiKVxuICBhc3NlcnQuZXF1YWwobnMxW1R5cGVkLnR5cGVOYW1lXSgpLFxuICAgICAgICAgICAgICAgXCJUeXBlZC5MaXN0KE51bWJlcilcIilcblxuICBhc3NlcnQuZGVlcEVxdWFsKG5zMS50b0pTT04oKSxcbiAgICAgICAgICAgICAgICAgICBbMSwgMiwgMywgNF0pXG59KVxuXG50ZXN0KFwiY29udmVydHMgc2VxdWVuY2VzIHRvIGxpc3RcIiwgYXNzZXJ0ID0+IHtcbiAgY29uc3Qgc2VxID0gSW1tdXRhYmxlLlNlcShbe3g6IDF9LCB7eDogMn1dKVxuICBjb25zdCB2ID0gUG9pbnRzKHNlcSlcblxuICBhc3NlcnQub2sodiBpbnN0YW5jZW9mIEltbXV0YWJsZS5MaXN0KVxuICBhc3NlcnQub2sodiBpbnN0YW5jZW9mIExpc3QpXG4gIGFzc2VydC5vayh2IGluc3RhbmNlb2YgUG9pbnRzKVxuXG4gIGFzc2VydC5lcXVhbCh2LnNpemUsIDIpXG5cbiAgYXNzZXJ0Lm9rKHYuZ2V0KDApIGluc3RhbmNlb2YgUmVjb3JkKVxuICBhc3NlcnQub2sodi5nZXQoMCkgaW5zdGFuY2VvZiBQb2ludClcbiAgYXNzZXJ0Lm9rKHYuZ2V0KDEpIGluc3RhbmNlb2YgUmVjb3JkKVxuICBhc3NlcnQub2sodi5nZXQoMSkgaW5zdGFuY2VvZiBQb2ludClcblxuICBhc3NlcnQuZGVlcEVxdWFsKHYudG9KU09OKCksIFt7eDoxLCB5OjB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eDoyLCB5OjB9XSlcbn0pXG5cbnRlc3QoXCJjYW4gYmUgc3ViY2xhc3NlZFwiLCBhc3NlcnQgPT4ge1xuICBjbGFzcyBHcmFwaCBleHRlbmRzIFBvaW50cyB7XG4gICAgZm9vKCkge1xuICAgICAgY29uc3QgZmlyc3QgPSB0aGlzLmZpcnN0KClcbiAgICAgIGNvbnN0IGxhc3QgPSB0aGlzLmxhc3QoKVxuICAgICAgcmV0dXJuIGxhc3QueCAtIGZpcnN0LnhcbiAgICB9XG4gIH1cblxuICBjb25zdCB2MSA9IG5ldyBHcmFwaChbe3k6M30se3g6N30se3g6OSwgeTo0fV0pXG5cbiAgYXNzZXJ0Lm9rKHYxIGluc3RhbmNlb2YgSW1tdXRhYmxlLkxpc3QpXG4gIGFzc2VydC5vayh2MSBpbnN0YW5jZW9mIExpc3QpXG4gIGFzc2VydC5vayh2MSBpbnN0YW5jZW9mIFBvaW50cylcbiAgYXNzZXJ0Lm9rKHYxIGluc3RhbmNlb2YgR3JhcGgpXG5cbiAgYXNzZXJ0LmVxdWFsKHYxLmZvbygpLCA5KVxuICBhc3NlcnQuZGVlcEVxdWFsKHYxLnRvSlNPTigpLFxuICAgICAgICAgICAgICAgICAgIFt7eDowLCB5OjN9LFxuICAgICAgICAgICAgICAgICAgICB7eDo3LCB5OjB9LFxuICAgICAgICAgICAgICAgICAgICB7eDo5LCB5OjR9XSlcblxuICBjb25zdCB2MiA9IHYxLnNldCgwLCB7eDogMiwgeTogNH0pXG5cbiAgYXNzZXJ0Lm9rKHYyIGluc3RhbmNlb2YgSW1tdXRhYmxlLkxpc3QpXG4gIGFzc2VydC5vayh2MiBpbnN0YW5jZW9mIExpc3QpXG4gIGFzc2VydC5vayh2MiBpbnN0YW5jZW9mIFBvaW50cylcbiAgYXNzZXJ0Lm9rKHYyIGluc3RhbmNlb2YgR3JhcGgpXG5cbiAgYXNzZXJ0LmVxdWFsKHYyLmZvbygpLCA3KVxuICBhc3NlcnQuZGVlcEVxdWFsKHYyLnRvSlNPTigpLFxuICAgICAgICAgICAgICAgICAgIFt7eDoyLCB5OjR9LFxuICAgICAgICAgICAgICAgICAgICB7eDo3LCB5OjB9LFxuICAgICAgICAgICAgICAgICAgICB7eDo5LCB5OjR9XSlcbn0pXG5cbnRlc3QoXCJzaG9ydC1jaXJjdWl0cyBpZiBhbHJlYWR5IGEgbGlzdFwiLCBhc3NlcnQgPT4ge1xuICBjb25zdCB2MSA9IFBvaW50cy5vZih7eDogMiwgeTogNH0sXG4gICAgICAgICAgICAgICAgICAgICAgIHt4OiA4LCB5OiAzfSlcblxuICBhc3NlcnQuZXF1YWwodjEsIFBvaW50cyh2MSkpXG5cbiAgYXNzZXJ0LmVxdWFsKHYxLCBuZXcgUG9pbnRzKHYxKSlcblxuICBjb25zdCBPdGhlclBvaW50cyA9IExpc3QoUG9pbnQpXG5cbiAgYXNzZXJ0Lm9rKE90aGVyUG9pbnRzKHYxKSBpbnN0YW5jZW9mIE90aGVyUG9pbnRzKVxuICBhc3NlcnQubm90T2soT3RoZXJQb2ludHModjEpIGluc3RhbmNlb2YgUG9pbnRzKVxuICBhc3NlcnQubm90RXF1YWwodjEsIE90aGVyUG9pbnRzKHYxKSlcbiAgYXNzZXJ0Lm9rKHYxLmVxdWFscyhPdGhlclBvaW50cyh2MSkpKVxuXG4gIGFzc2VydC5vayhuZXcgT3RoZXJQb2ludHModjEpIGluc3RhbmNlb2YgT3RoZXJQb2ludHMpXG4gIGFzc2VydC5ub3RPayhuZXcgT3RoZXJQb2ludHModjEpIGluc3RhbmNlb2YgUG9pbnRzKVxuICBhc3NlcnQubm90RXF1YWwodjEsIG5ldyBPdGhlclBvaW50cyh2MSkpXG4gIGFzc2VydC5vayh2MS5lcXVhbHMobmV3IE90aGVyUG9pbnRzKHYxKSkpXG5cbiAgY2xhc3MgU3ViUG9pbnRzIGV4dGVuZHMgUG9pbnRzIHtcbiAgICBoZWFkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlyc3QoKVxuICAgIH1cbiAgfVxuXG4gIGFzc2VydC5ub3RFcXVhbCh2MSwgbmV3IFN1YlBvaW50cyh2MSkpXG4gIGFzc2VydC5vayh2MS5lcXVhbHMobmV3IFN1YlBvaW50cyh2MSkpKVxuXG5cbiAgYXNzZXJ0LmVxdWFsKG5ldyBTdWJQb2ludHModjEpLmhlYWQoKSxcbiAgICAgICAgICAgICAgIHYxLmZpcnN0KCkpXG59KVxuXG50ZXN0KFwiY2FuIGJlIGNsZWFyZWRcIiwgYXNzZXJ0ID0+IHtcbiAgY29uc3QgdjEgPSBQb2ludHMub2Yoe3g6MX0sIHt4OjJ9LCB7eDozfSlcbiAgY29uc3QgdjIgPSB2MS5jbGVhcigpXG5cbiAgYXNzZXJ0Lm9rKHYxIGluc3RhbmNlb2YgUG9pbnRzKVxuICBhc3NlcnQub2sodjIgaW5zdGFuY2VvZiBQb2ludHMpXG5cbiAgYXNzZXJ0LmVxdWFsKHYxLnNpemUsIDMpXG4gIGFzc2VydC5lcXVhbCh2Mi5zaXplLCAwKVxuXG4gIGFzc2VydC5kZWVwRXF1YWwodjEudG9KU09OKCksXG4gICAgICAgICAgICAgICAgICAgW3t4OjEsIHk6MH0sIHt4OjIsIHk6MH0sIHt4OjMsIHk6MH1dKVxuXG4gIGFzc2VydC5kZWVwRXF1YWwodjIudG9KU09OKCksXG4gICAgICAgICAgICAgICAgICAgW10pXG5cbiAgYXNzZXJ0LmVxdWFsKHYyLmZpcnN0KCksIHZvaWQoMCkpXG59KVxuXG50ZXN0KFwiY2FuIGNvbnN0cnVjdCByZWNvcmRzXCIsIGFzc2VydCA9PiB7XG4gIGNvbnN0IHYxID0gUG9pbnRzKClcbiAgY29uc3QgdjIgPSB2MS5wdXNoKHt4OjF9KVxuICBjb25zdCB2MyA9IHYyLnB1c2goe3k6Mn0pXG4gIGNvbnN0IHY0ID0gdjMucHVzaCh7eDozLCB5OjN9KVxuICBjb25zdCB2NSA9IHY0LnB1c2godm9pZCgwKSlcblxuICBhc3NlcnQub2sodjEgaW5zdGFuY2VvZiBQb2ludHMpXG4gIGFzc2VydC5vayh2MiBpbnN0YW5jZW9mIFBvaW50cylcbiAgYXNzZXJ0Lm9rKHYzIGluc3RhbmNlb2YgUG9pbnRzKVxuICBhc3NlcnQub2sodjQgaW5zdGFuY2VvZiBQb2ludHMpXG4gIGFzc2VydC5vayh2NSBpbnN0YW5jZW9mIFBvaW50cylcblxuICBhc3NlcnQuZXF1YWwodjEuc2l6ZSwgMClcbiAgYXNzZXJ0LmVxdWFsKHYyLnNpemUsIDEpXG4gIGFzc2VydC5lcXVhbCh2My5zaXplLCAyKVxuICBhc3NlcnQuZXF1YWwodjQuc2l6ZSwgMylcbiAgYXNzZXJ0LmVxdWFsKHY1LnNpemUsIDQpXG5cbiAgYXNzZXJ0LmRlZXBFcXVhbCh2MS50b0pTT04oKSwgW10pXG4gIGFzc2VydC5kZWVwRXF1YWwodjIudG9KU09OKCksIFt7eDoxLCB5OjB9XSlcbiAgYXNzZXJ0LmRlZXBFcXVhbCh2My50b0pTT04oKSwgW3t4OjEsIHk6MH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eDowLCB5OjJ9XSlcbiAgYXNzZXJ0LmRlZXBFcXVhbCh2NC50b0pTT04oKSwgW3t4OjEsIHk6MH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eDowLCB5OjJ9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3g6MywgeTozfV0pXG4gIGFzc2VydC5kZWVwRXF1YWwodjUudG9KU09OKCksIFt7eDoxLCB5OjB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3g6MCwgeToyfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt4OjMsIHk6M30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eDowLCB5OjB9XSlcbn0pXG5cbnRlc3QoXCJjYW4gdXBkYXRlIHN1Yi1yZWNvcmRzXCIsIGFzc2VydCA9PiB7XG4gIGNvbnN0IHYxID0gUG9pbnRzLm9mKHt4OiA0fSwge3k6IDR9KVxuICBjb25zdCB2MiA9IHYxLnNldEluKFswLCBcInlcIl0sIDUpXG4gIGNvbnN0IHYzID0gdjIuc2V0KDIsIHZvaWQoMCkpXG4gIGNvbnN0IHY0ID0gdjMuc2V0SW4oWzEsIFwieVwiXSwgdm9pZCgwKSlcblxuICBhc3NlcnQub2sodjEgaW5zdGFuY2VvZiBQb2ludHMpXG4gIGFzc2VydC5vayh2MiBpbnN0YW5jZW9mIFBvaW50cylcbiAgYXNzZXJ0Lm9rKHYzIGluc3RhbmNlb2YgUG9pbnRzKVxuICBhc3NlcnQub2sodjQgaW5zdGFuY2VvZiBQb2ludHMpXG5cbiAgYXNzZXJ0LmVxdWFsKHYxLnNpemUsIDIpXG4gIGFzc2VydC5lcXVhbCh2Mi5zaXplLCAyKVxuICBhc3NlcnQuZXF1YWwodjMuc2l6ZSwgMylcbiAgYXNzZXJ0LmVxdWFsKHY0LnNpemUsIDMpXG5cbiAgYXNzZXJ0LmRlZXBFcXVhbCh2MS50b0pTT04oKSxcbiAgICAgICAgICAgICAgICAgICBbe3g6NCwgeTowfSxcbiAgICAgICAgICAgICAgICAgICAge3g6MCwgeTo0fV0pXG5cbiAgYXNzZXJ0LmRlZXBFcXVhbCh2Mi50b0pTT04oKSxcbiAgICAgICAgICAgICAgICAgICBbe3g6NCwgeTo1fSxcbiAgICAgICAgICAgICAgICAgICAge3g6MCwgeTo0fV0pXG5cbiAgYXNzZXJ0LmRlZXBFcXVhbCh2My50b0pTT04oKSxcbiAgICAgICAgICAgICAgICAgICBbe3g6NCwgeTo1fSxcbiAgICAgICAgICAgICAgICAgICAge3g6MCwgeTo0fSxcbiAgICAgICAgICAgICAgICAgICAge3g6MCwgeTowfV0pXG5cbiAgYXNzZXJ0LmRlZXBFcXVhbCh2NC50b0pTT04oKSxcbiAgICAgICAgICAgICAgICAgICBbe3g6NCwgeTo1fSxcbiAgICAgICAgICAgICAgICAgICAge3g6MCwgeTowfSxcbiAgICAgICAgICAgICAgICAgICAge3g6MCwgeTowfV0pXG59KVxuXG50ZXN0KFwic2VyaWFsaXplICYgcGFyc2VcIiwgYXNzZXJ0ID0+IHtcbiAgY29uc3QgbnMxID0gTnVtYmVyTGlzdC5vZigxLCAyLCAzLCA0KVxuXG4gIGFzc2VydC5vayhOdW1iZXJMaXN0KG5zMS50b0pTT04oKSkuZXF1YWxzKG5zMSksXG4gICAgICAgICAgICBcInBhcnNpbmcgc2VyaWFsaXplZCB0eXBlZCBsaXN0XCIpXG5cbiAgYXNzZXJ0Lm9rKG5zMS5jb25zdHJ1Y3RvcihuczEudG9KU09OKCkpLmVxdWFscyhuczEpLFxuICAgICAgICAgICAgXCJwYXJzaW5nIHdpdGggY29uc3RydWN0b3JcIilcbn0pXG5cbnRlc3QoXCJzZXJpYWxpemUgJiBwYXJzZSBuZXN0ZWRcIiwgYXNzZXJ0ID0+IHtcbiAgY29uc3QgdjEgPSBQb2ludHMub2Yoe3g6MX0sIHt4OjJ9LCB7eTozfSlcblxuICBhc3NlcnQub2soUG9pbnRzKHYxLnRvSlNPTigpKS5lcXVhbHModjEpKVxuICBhc3NlcnQub2sodjEuY29uc3RydWN0b3IodjEudG9KU09OKCkpLmVxdWFscyh2MSkpXG4gIGFzc2VydC5vayh2MS5lcXVhbHMobmV3IFBvaW50cyh2MS50b0pTT04oKSkpKVxuXG4gIGFzc2VydC5vayhQb2ludHModjEudG9KU09OKCkpLmdldCgwKSBpbnN0YW5jZW9mIFBvaW50KVxufSlcblxudGVzdChcImNvbnN0cnVjdCB3aXRoIGFycmF5XCIsIGFzc2VydCA9PiB7XG4gIGNvbnN0IG5zMSA9IE51bWJlckxpc3QoWzEsIDIsIDMsIDQsIDVdKVxuXG4gIGFzc2VydC5vayhuczEgaW5zdGFuY2VvZiBOdW1iZXJMaXN0KVxuICBhc3NlcnQub2sobnMxLnNpemUsIDUpXG4gIGFzc2VydC5lcXVhbChuczEuZ2V0KDApLCAxKVxuICBhc3NlcnQuZXF1YWwobnMxLmdldCgxKSwgMilcbiAgYXNzZXJ0LmVxdWFsKG5zMS5nZXQoMiksIDMpXG4gIGFzc2VydC5lcXVhbChuczEuZ2V0KDMpLCA0KVxuICBhc3NlcnQuZXF1YWwobnMxLmdldCg0KSwgNSlcbn0pXG5cbnRlc3QoXCJjb25zdHJ1Y3Qgd2l0aCBpbmRleGVkIHNlcVwiLCBhc3NlcnQgPT4ge1xuICBjb25zdCBzZXEgPSBJbW11dGFibGUuU2VxKFsxLCAyLCAzXSlcbiAgY29uc3QgbnMxID0gTnVtYmVyTGlzdChzZXEpXG5cbiAgYXNzZXJ0Lm9rKG5zMSBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5vayhuczEuc2l6ZSwgMylcbiAgYXNzZXJ0LmVxdWFsKG5zMS5nZXQoMCksIDEpXG4gIGFzc2VydC5lcXVhbChuczEuZ2V0KDEpLCAyKVxuICBhc3NlcnQuZXF1YWwobnMxLmdldCgyKSwgMylcbn0pXG5cbnRlc3QoXCJkb2VzIG5vdCBjb25zdHJ1Y3QgZm9ybSBhIHNjYWxhclwiLCBhc3NlcnQgPT4ge1xuICBhc3NlcnQudGhyb3dzKF8gPT4gTnVtYmVyTGlzdCgzKSxcbiAgICAgICAgICAgICAgICAvRXhwZWN0ZWQgQXJyYXkgb3IgaXRlcmFibGUgb2JqZWN0IG9mIHZhbHVlcy8pXG59KVxuXG5cbnRlc3QoXCJjYW4gbm90IGNvbnN0cnVjdCB3aXRoIGludmFsaWQgZGF0YVwiLCBhc3NlcnQgPT4ge1xuICBjb25zdCBQb2ludCA9IFJlY29yZCh7eDpOdW1iZXIsIHk6TnVtYmVyfSwgXCJQb2ludFwiKVxuICBjb25zdCBQb2ludHMgPSBMaXN0KFBvaW50LCBcIlBvaW50c1wiKVxuXG4gIGFzc2VydC50aHJvd3MoXyA9PiBQb2ludHMub2Yoe3g6MSwgeTowfSwge3k6MiwgeDoyfSwge3g6M30pLFxuICAgICAgICAgICAgICAgIC9cInVuZGVmaW5lZFwiIGlzIG5vdCBhIG51bWJlci8pXG59KVxuXG50ZXN0KFwic2V0IGFuZCBnZXQgYSB2YWx1ZVwiLCBhc3NlcnQgPT4ge1xuICBjb25zdCBucyA9IE51bWJlckxpc3QoKVxuICBjb25zdCBuczIgPSBucy5zZXQoMCwgNylcblxuICBhc3NlcnQuZXF1YWwobnMuc2l6ZSwgMClcbiAgYXNzZXJ0LmVxdWFsKG5zLmNvdW50KCksIDApXG4gIGFzc2VydC5lcXVhbChucy5nZXQoMCksIHZvaWQoMCkpXG5cbiAgYXNzZXJ0LmVxdWFsKG5zMi5zaXplLCAxKVxuICBhc3NlcnQuZXF1YWwobnMyLmNvdW50KCksIDEpXG4gIGFzc2VydC5lcXVhbChuczIuZ2V0KDApLCA3KVxufSlcblxudGVzdChcInNldCBhbmQgZ2V0IHJlY29yZHNcIiwgYXNzZXJ0ID0+IHtcbiAgY29uc3QgdjEgPSBQb2ludHMoKVxuICBjb25zdCB2MiA9IHYxLnNldCgwLCB7eDo3fSlcblxuICBhc3NlcnQuZXF1YWwodjEuc2l6ZSwgMClcbiAgYXNzZXJ0LmVxdWFsKHYxLmNvdW50KCksIDApXG4gIGFzc2VydC5lcXVhbCh2MS5nZXQoMCksIHZvaWQoMCkpXG5cbiAgYXNzZXJ0LmVxdWFsKHYyLnNpemUsIDEpXG4gIGFzc2VydC5lcXVhbCh2Mi5jb3VudCgpLCAxKVxuICBhc3NlcnQub2sodjIuZ2V0KDApIGluc3RhbmNlb2YgUG9pbnQpXG4gIGFzc2VydC5vayh2Mi5nZXQoMCkudG9KU09OKCksIHt4OjcsIHk6MH0pXG59KVxuXG50ZXN0KFwiY2FuIG5vdCBzZXQgaW52YWxpZCB2YWx1ZVwiLCBhc3NlcnQgPT4ge1xuICBjb25zdCBucyA9IE51bWJlckxpc3QoKVxuXG4gIGFzc2VydC50aHJvd3MoXyA9PiBucy5zZXQoMCwgXCJmb29cIiksXG4gICAgICAgICAgICAgICAgL1wiZm9vXCIgaXMgbm90IGEgbnVtYmVyLylcblxuICBhc3NlcnQuZXF1YWwobnMuc2l6ZSwgMClcbn0pXG5cbnRlc3QoXCJjYW4gbm90IHNldCBpbnZhbGlkIHN0cnVjdHVyZVwiLCBhc3NlcnQgPT4ge1xuICBjb25zdCB2ID0gUG9pbnRzKClcblxuICBhc3NlcnQudGhyb3dzKF8gPT4gdi5zZXQoMCwgNSksXG4gICAgICAgICAgICAgICAgL0ludmFsaWQgZGF0YSBzdHJ1Y3R1cmUvKVxufSlcblxudGVzdChcImNhbiBub3Qgc2V0IHVuZGVjbGFyZWQgZmllbGRzXCIsIGFzc2VydCA9PiB7XG4gIGNvbnN0IHYgPSBQb2ludHMub2Yoe3g6IDl9KVxuXG4gIGFzc2VydC50aHJvd3MoXyA9PiB2LnNldEluKFswLCBcImRcIl0sIDQpLFxuICAgICAgICAgICAgICAgIC9DYW5ub3Qgc2V0IHVua25vd24gZmllbGQgXCJkXCIvKVxufSlcblxudGVzdChcImNvdW50cyBmcm9tIHRoZSBlbmQgb2YgdGhlIGxpc3Qgb24gbmVnYXRpdmUgaW5kZXhcIiwgYXNzZXJ0ID0+IHtcbiAgY29uc3QgbnMgPSBOdW1iZXJMaXN0Lm9mKDEsIDIsIDMsIDQsIDUsIDYsIDcpXG4gIGFzc2VydC5lcXVhbChucy5nZXQoLTEpLCA3KVxuICBhc3NlcnQuZXF1YWwobnMuZ2V0KC01KSwgMylcbiAgYXNzZXJ0LmVxdWFsKG5zLmdldCgtOSksIHZvaWQoMCkpXG4gIGFzc2VydC5lcXVhbChucy5nZXQoLTk5OSwgMTAwMCksIDEwMDApXG59KVxuXG50ZXN0KFwiY29lcmNlcyBudW1lcmljLXN0cmluZyBrZXlzXCIsIGFzc2VydCA9PiB7XG4gIC8vIE9mIGNvdXJzZSwgVHlwZVNjcmlwdCBwcm90ZWN0cyB1cyBmcm9tIHRoaXMsIHNvIGNhc3QgdG8gXCJhbnlcIiB0byB0ZXN0LlxuICBjb25zdCBucyA9IE51bWJlckxpc3Qub2YoMSwgMiwgMywgNCwgNSwgNilcblxuXG4gIGFzc2VydC5lcXVhbChucy5nZXQoJzEnKSwgMilcbiAgYXNzZXJ0LmVxdWFsKG5zLmdldCgnLTEnKSwgNilcbiAgYXNzZXJ0LmVxdWFsKG5zLnNldCgnMycsIDEwKS5nZXQoJy0zJyksIDEwKVxufSlcblxudGVzdChcInNldHRpbmcgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZVwiLCBhc3NlcnQgPT4ge1xuICBjb25zdCB2MSA9IE51bWJlckxpc3Qub2YoMSlcbiAgY29uc3QgdjIgPSB2MS5zZXQoMCwgMTUpXG5cbiAgYXNzZXJ0LmVxdWFsKHYxLmdldCgwKSwgMSlcbiAgYXNzZXJ0LmVxdWFsKHYyLmdldCgwKSwgMTUpXG5cbiAgYXNzZXJ0Lm9rKHYxIGluc3RhbmNlb2YgTnVtYmVyTGlzdClcbiAgYXNzZXJ0Lm9rKHYyIGluc3RhbmNlb2YgTnVtYmVyTGlzdClcbn0pXG5cbnRlc3QoXCJzaXplIGluY2x1ZGVzIHRoZSBoaWdoZXN0IGluZGV4XCIsIGFzc2VydCA9PiB7XG4gIGNvbnN0IHYwID0gTnVtYmVyTGlzdCgpXG4gIGNvbnN0IHYxID0gdjAuc2V0KDAsIDEpXG4gIGNvbnN0IHYyID0gdjEuc2V0KDEsIDIpXG4gIGNvbnN0IHYzID0gdjIuc2V0KDIsIDMpXG5cbiAgYXNzZXJ0LmVxdWFsKHYwLnNpemUsIDApXG4gIGFzc2VydC5lcXVhbCh2MS5zaXplLCAxKVxuICBhc3NlcnQuZXF1YWwodjIuc2l6ZSwgMilcbiAgYXNzZXJ0LmVxdWFsKHYzLnNpemUsIDMpXG5cbiAgYXNzZXJ0Lm9rKHYwIGluc3RhbmNlb2YgTnVtYmVyTGlzdClcbiAgYXNzZXJ0Lm9rKHYxIGluc3RhbmNlb2YgTnVtYmVyTGlzdClcbiAgYXNzZXJ0Lm9rKHYyIGluc3RhbmNlb2YgTnVtYmVyTGlzdClcbiAgYXNzZXJ0Lm9rKHYzIGluc3RhbmNlb2YgTnVtYmVyTGlzdClcbn0pXG5cbnRlc3QoXCJnZXQgaGVscGVycyBtYWtlIGZvciBlYXNpZXIgdG8gcmVhZCBjb2RlXCIsIGFzc2VydCA9PiB7XG4gIGNvbnN0IHYxID0gTnVtYmVyTGlzdC5vZigxLCAyLCAzKVxuXG4gIGFzc2VydC5lcXVhbCh2MS5maXJzdCgpLCAxKVxuICBhc3NlcnQuZXF1YWwodjEuZ2V0KDEpLCAyKVxuICBhc3NlcnQuZXF1YWwodjEubGFzdCgpLCAzKVxufSlcblxudGVzdCgnc2xpY2UgaGVscGVycyBtYWtlIGZvciBlYXNpZXIgdG8gcmVhZCBjb2RlJywgYXNzZXJ0ID0+IHtcbiAgY29uc3QgdjAgPSBOdW1iZXJMaXN0Lm9mKDEsIDIsIDMpXG4gIGNvbnN0IHYxID0gTnVtYmVyTGlzdC5vZigxLCAyKVxuICBjb25zdCB2MiA9IE51bWJlckxpc3Qub2YoMSlcbiAgY29uc3QgdjMgPSBOdW1iZXJMaXN0KClcblxuICBhc3NlcnQuZGVlcEVxdWFsKHYwLnJlc3QoKS50b0FycmF5KCksIFsyLCAzXSk7XG4gIGFzc2VydC5vayh2MC5yZXN0KCkgaW5zdGFuY2VvZiBOdW1iZXJMaXN0KVxuICBhc3NlcnQuZGVlcEVxdWFsKHYwLmJ1dExhc3QoKS50b0FycmF5KCksIFsxLCAyXSlcbiAgYXNzZXJ0Lm9rKHYwLmJ1dExhc3QoKSBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG5cbiAgYXNzZXJ0LmRlZXBFcXVhbCh2MS5yZXN0KCkudG9BcnJheSgpLCBbMl0pXG4gIGFzc2VydC5vayh2MS5yZXN0KCkgaW5zdGFuY2VvZiBOdW1iZXJMaXN0KVxuICBhc3NlcnQuZGVlcEVxdWFsKHYxLmJ1dExhc3QoKS50b0FycmF5KCksIFsxXSlcbiAgYXNzZXJ0Lm9rKHYxLmJ1dExhc3QoKSBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG5cbiAgYXNzZXJ0LmRlZXBFcXVhbCh2Mi5yZXN0KCkudG9BcnJheSgpLCBbXSlcbiAgYXNzZXJ0Lm9rKHYyLnJlc3QoKSBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5kZWVwRXF1YWwodjIuYnV0TGFzdCgpLnRvQXJyYXkoKSwgW10pXG4gIGFzc2VydC5vayh2Mi5idXRMYXN0KCkgaW5zdGFuY2VvZiBOdW1iZXJMaXN0KVxuXG4gIGFzc2VydC5kZWVwRXF1YWwodjMucmVzdCgpLnRvQXJyYXkoKSwgW10pXG4gIGFzc2VydC5vayh2My5yZXN0KCkgaW5zdGFuY2VvZiBOdW1iZXJMaXN0KVxuICBhc3NlcnQuZGVlcEVxdWFsKHYzLmJ1dExhc3QoKS50b0FycmF5KCksIFtdKVxuICBhc3NlcnQub2sodjMuYnV0TGFzdCgpIGluc3RhbmNlb2YgTnVtYmVyTGlzdClcbn0pXG5cbnRlc3QoJ2NhbiBzZXQgYXQgd2l0aCBpbiB0aGUgYm9uZHMnLCBhc3NlcnQgPT4ge1xuICBjb25zdCB2MCA9IE51bWJlckxpc3Qub2YoMSwgMiwgMylcbiAgY29uc3QgdjEgPSB2MC5zZXQoMSwgMjApIC8vIHdpdGhpbiBleGlzdGluZyB0YWlsXG4gIGNvbnN0IHYyID0gdjEuc2V0KDMsIDMwKSAvLyBhdCBsYXN0IHBvc2l0aW9uXG5cbiAgYXNzZXJ0LnRocm93cyhfID0+IHYxLnNldCg0LCA0KSxcbiAgICAgICAgICAgICAgICAvSW5kZXggXCI0XCIgaXMgb3V0IG9mIGJvdW5kLylcbiAgYXNzZXJ0LnRocm93cyhfID0+IHYyLnNldCgzMSwgMzEpLFxuICAgICAgICAgICAgICAgIC9JbmRleCBcIjMxXCIgaXMgb3V0IG9mIGJvdW5kLylcblxuICBhc3NlcnQuZXF1YWwodjIuc2l6ZSwgdjEuc2l6ZSArIDEpXG5cbiAgYXNzZXJ0LmRlZXBFcXVhbCh2MC50b0FycmF5KCksIFsxLCAyLCAzXSlcbiAgYXNzZXJ0LmRlZXBFcXVhbCh2MS50b0FycmF5KCksIFsxLCAyMCwgM10pXG4gIGFzc2VydC5kZWVwRXF1YWwodjIudG9BcnJheSgpLCBbMSwgMjAsIDMsIDMwXSlcblxuICBhc3NlcnQub2sodjAgaW5zdGFuY2VvZiBOdW1iZXJMaXN0KVxuICBhc3NlcnQub2sodjEgaW5zdGFuY2VvZiBOdW1iZXJMaXN0KVxuICBhc3NlcnQub2sodjIgaW5zdGFuY2VvZiBOdW1iZXJMaXN0KVxufSlcblxuXG5cbnRlc3QoJ2NhbiBjb250YWluIGEgbGFyZ2UgbnVtYmVyIG9mIGluZGljZXMnLCBhc3NlcnQgPT4ge1xuICBjb25zdCBpbnB1dCA9IEltbXV0YWJsZS5SYW5nZSgwLDIwMDAwKVxuICBjb25zdCBudW1iZXJzID0gTnVtYmVyTGlzdChpbnB1dClcbiAgbGV0IGl0ZXJhdGlvbnMgPSAwXG5cbiAgYXNzZXJ0Lm9rKG51bWJlcnMuZXZlcnkodmFsdWUgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHZhbHVlID09PSBpdGVyYXRpb25zXG4gICAgaXRlcmF0aW9ucyA9IGl0ZXJhdGlvbnMgKyAxXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KSlcbn0pXG5cbnRlc3QoJ3B1c2ggaW5zZXJ0cyBhdCBoaWdoZXN0IGluZGV4JywgYXNzZXJ0ID0+IHtcbiAgY29uc3QgdjAgPSBOdW1iZXJMaXN0Lm9mKDEsIDIsIDMpXG4gIGNvbnN0IHYxID0gdjAucHVzaCg0LCA1LCA2KVxuXG4gIGFzc2VydC5vayh2MCBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5vayh2MSBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG5cbiAgYXNzZXJ0LmVxdWFsKHYwLnNpemUsIDMpXG4gIGFzc2VydC5lcXVhbCh2MS5zaXplLCA2KVxuXG4gIGFzc2VydC5kZWVwRXF1YWwodjAudG9BcnJheSgpLCBbMSwgMiwgM10pXG4gIGFzc2VydC5kZWVwRXF1YWwodjEudG9BcnJheSgpLCBbMSwgMiwgMywgNCwgNSwgNl0pXG59KVxuXG50ZXN0KCdwb3AgcmVtb3ZlcyB0aGUgaGlnaGVzdCBpbmRleCwgZGVjcmVtZW50aW5nIHNpemUnLCBhc3NlcnQgPT4ge1xuICBjb25zdCB2MCA9IE51bWJlckxpc3Qub2YoMSwgMiwgMylcbiAgY29uc3QgdjEgPSB2MC5wb3AoKVxuICBjb25zdCB2MiA9IHYxLnB1c2goNClcblxuXG4gIGFzc2VydC5lcXVhbCh2MC5sYXN0KCksIDMpXG4gIGFzc2VydC5lcXVhbCh2MC5zaXplLCAzKVxuICBhc3NlcnQuZGVlcEVxdWFsKHYwLnRvQXJyYXkoKSwgWzEsIDIsIDNdKVxuXG4gIGFzc2VydC5vayh2MSBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5lcXVhbCh2MS5sYXN0KCksIDIpXG4gIGFzc2VydC5lcXVhbCh2MS5zaXplLCAyKVxuICBhc3NlcnQuZGVlcEVxdWFsKHYxLnRvQXJyYXkoKSwgWzEsIDJdKVxuXG4gIGFzc2VydC5vayh2MiBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5lcXVhbCh2Mi5sYXN0KCksIDQpXG4gIGFzc2VydC5lcXVhbCh2Mi5zaXplLCAzKVxuICBhc3NlcnQuZGVlcEVxdWFsKHYyLnRvQXJyYXkoKSwgWzEsIDIsIDRdKVxufSlcblxudGVzdCgncG9wIG9uIGVtcHR5JywgYXNzZXJ0ID0+IHtcbiAgY29uc3QgdjAgPSBOdW1iZXJMaXN0Lm9mKDEpXG4gIGNvbnN0IHYxID0gdjAucG9wKClcbiAgY29uc3QgdjIgPSB2MS5wb3AoKVxuICBjb25zdCB2MyA9IHYyLnBvcCgpXG4gIGNvbnN0IHY0ID0gdjMucG9wKClcbiAgY29uc3QgdjUgPSB2NC5wb3AoKVxuXG4gIGFzc2VydC5lcXVhbCh2MC5zaXplLCAxKVxuICBhc3NlcnQuZGVlcEVxdWFsKHYwLnRvQXJyYXkoKSwgWzFdKVxuXG4gICFbdjEsIHYyLCB2MywgdjQsIHY1XS5mb3JFYWNoKHYgPT4ge1xuICAgIGFzc2VydC5vayh2IGluc3RhbmNlb2YgTnVtYmVyTGlzdClcbiAgICBhc3NlcnQuZXF1YWwodi5zaXplLCAwKVxuICAgIGFzc2VydC5kZWVwRXF1YWwodi50b0FycmF5KCksIFtdKVxuICB9KVxufSlcblxudGVzdCgndGVzdCByZW1vdmVzIGFueSBpbmRleCcsIGFzc2VydCA9PiB7XG4gIGNvbnN0IHYwID0gTnVtYmVyTGlzdC5vZigxLCAyLCAzKVxuICBjb25zdCB2MSA9IHYwLnJlbW92ZSgyKVxuICBjb25zdCB2MiA9IHYxLnJlbW92ZSgwKVxuICBjb25zdCB2MyA9IHYyLnJlbW92ZSg5KVxuICBjb25zdCB2NCA9IHYwLnJlbW92ZSgzKVxuICBjb25zdCB2NSA9IHYzLnB1c2goNSlcblxuXG4gIGFzc2VydC5vayh2MCBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5vayh2MSBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5vayh2MiBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5vayh2MyBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5vayh2NCBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5vayh2NSBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG5cbiAgYXNzZXJ0LmVxdWFsKHYwLnNpemUsIDMpXG4gIGFzc2VydC5lcXVhbCh2MS5zaXplLCAyKVxuICBhc3NlcnQuZXF1YWwodjIuc2l6ZSwgMSlcbiAgYXNzZXJ0LmVxdWFsKHYzLnNpemUsIDEpXG4gIGFzc2VydC5lcXVhbCh2NC5zaXplLCAzKVxuICBhc3NlcnQuZXF1YWwodjUuc2l6ZSwgMilcblxuICBhc3NlcnQuZGVlcEVxdWFsKHYwLnRvQXJyYXkoKSwgWzEsIDIsIDNdKVxuICBhc3NlcnQuZGVlcEVxdWFsKHYxLnRvQXJyYXkoKSwgWzEsIDJdKVxuICBhc3NlcnQuZGVlcEVxdWFsKHYyLnRvQXJyYXkoKSwgWzJdKVxuICBhc3NlcnQuZGVlcEVxdWFsKHYzLnRvQXJyYXkoKSwgWzJdKVxuICBhc3NlcnQuZGVlcEVxdWFsKHY0LnRvQXJyYXkoKSwgWzEsIDIsIDNdKVxuICBhc3NlcnQuZGVlcEVxdWFsKHY1LnRvQXJyYXkoKSwgWzIsIDVdKVxufSlcblxudGVzdChcInNoaWZ0IHJlbW92ZXMgZnJvbSB0aGUgZnJvbnRcIiwgYXNzZXJ0ID0+IHtcbiAgY29uc3QgdjAgPSBOdW1iZXJMaXN0Lm9mKDEsIDIsIDMpXG4gIGNvbnN0IHYxID0gdjAuc2hpZnQoKVxuXG4gIGFzc2VydC5vayh2MCBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5vayh2MSBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG5cblxuICBhc3NlcnQuZGVlcEVxdWFsKHYwLnRvQXJyYXkoKSwgWzEsIDIsIDNdKVxuICBhc3NlcnQuZGVlcEVxdWFsKHYxLnRvQXJyYXkoKSwgWzIsIDNdKVxuXG4gIGFzc2VydC5lcXVhbCh2MC5maXJzdCgpLCAxKVxuICBhc3NlcnQuZXF1YWwodjEuZmlyc3QoKSwgMilcblxuICBhc3NlcnQuZXF1YWwodjAuc2l6ZSwgMylcbiAgYXNzZXJ0LmVxdWFsKHYxLnNpemUsIDIpXG59KVxuXG50ZXN0KFwidW5zaGlmdCBpbnNlcnQgaXRlbXMgaW4gdGhlIGZyb250XCIsIGFzc2VydCA9PiB7XG4gIGNvbnN0IHYwID0gTnVtYmVyTGlzdC5vZigxLCAyLCAzKVxuICBjb25zdCB2MSA9IHYwLnVuc2hpZnQoMTEsIDEyLCAxMylcblxuICBhc3NlcnQub2sodjAgaW5zdGFuY2VvZiBOdW1iZXJMaXN0KVxuICBhc3NlcnQub2sodjEgaW5zdGFuY2VvZiBOdW1iZXJMaXN0KVxuXG5cbiAgYXNzZXJ0LmRlZXBFcXVhbCh2MC50b0FycmF5KCksIFsxLCAyLCAzXSlcbiAgYXNzZXJ0LmRlZXBFcXVhbCh2MS50b0FycmF5KCksIFsxMSwgMTIsIDEzLCAxLCAyLCAzXSlcblxuICBhc3NlcnQuZXF1YWwodjAuZmlyc3QoKSwgMSlcbiAgYXNzZXJ0LmVxdWFsKHYxLmZpcnN0KCksIDExKVxuXG4gIGFzc2VydC5lcXVhbCh2MC5zaXplLCAzKVxuICBhc3NlcnQuZXF1YWwodjEuc2l6ZSwgNilcbn0pXG5cblxudGVzdCgnZmluZHMgdmFsdWVzIHVzaW5nIGluZGV4T2YnLCBhc3NlcnQgPT4ge1xuICB2YXIgdiA9IE51bWJlckxpc3Qub2YoMSwgMiwgMywgMiwgMSlcblxuICBhc3NlcnQuZXF1YWwodi5pbmRleE9mKDIpLCAxKVxuICBhc3NlcnQuZXF1YWwodi5pbmRleE9mKDMpLCAyKVxuICBhc3NlcnQuZXF1YWwodi5pbmRleE9mKDQpLCAtMSlcbn0pO1xuXG50ZXN0KCdmaW5kcyB2YWx1ZXMgdXNpbmcgZmluZEluZGV4JywgYXNzZXJ0ID0+IHtcbiAgdmFyIHYgPSBTdHJpbmdMaXN0Lm9mKCdhJywgJ2InLCAnYycsICdCJywgJ2EnKVxuXG4gIGFzc2VydC5lcXVhbCh2LmZpbmRJbmRleChpc1VwcGVyQ2FzZSksIDMpXG4gIGFzc2VydC5lcXVhbCh2LmZpbmRJbmRleCh4ID0+IHgubGVuZ3RoID4gMSksIC0xKVxufSlcblxudGVzdCgnZmluZHMgdmFsdWVzIHVzaW5nIGZpbmRFbnRyeScsIGFzc2VydCA9PiB7XG4gIHZhciB2ID0gU3RyaW5nTGlzdC5vZignYScsICdiJywgJ2MnLCAnQicsICdhJylcblxuICBhc3NlcnQuZGVlcEVxdWFsKHYuZmluZEVudHJ5KGlzVXBwZXJDYXNlKSwgWzMsICdCJ10pXG4gIGFzc2VydC5lcXVhbCh2LmZpbmRFbnRyeSh4ID0+IHgubGVuZ3RoID4gMSksIHZvaWQoMCkpXG59KVxuXG50ZXN0KCdtYXBzIHZhbHVlcycsIGFzc2VydCA9PiB7XG4gIHZhciB2MCA9IE51bWJlckxpc3Qub2YoMSwgMiwgMylcbiAgdmFyIHYxID0gdjAubWFwKGluYylcblxuICBhc3NlcnQub2sodjAgaW5zdGFuY2VvZiBOdW1iZXJMaXN0KVxuICBhc3NlcnQub2sodjEgaW5zdGFuY2VvZiBOdW1iZXJMaXN0KVxuICBhc3NlcnQub2sodjEgaW5zdGFuY2VvZiBJbW11dGFibGUuTGlzdClcblxuICBhc3NlcnQuZXF1YWwodjAuc2l6ZSwgMylcbiAgYXNzZXJ0LmVxdWFsKHYxLnNpemUsIDMpXG5cbiAgYXNzZXJ0LmRlZXBFcXVhbCh2MC50b0FycmF5KCksIFsxLCAyLCAzXSlcbiAgYXNzZXJ0LmRlZXBFcXVhbCh2MS50b0FycmF5KCksIFsyLCAzLCA0XSlcbn0pXG5cbnRlc3QoJ21hcHMgcmVjb3JkcyB0byBhbnknLCBhc3NlcnQgPT4ge1xuICBjb25zdCB2MCA9IFBvaW50cy5vZih7eDoxfSwge3k6Mn0sIHt4OjMsIHk6M30pXG4gIGNvbnN0IHYxID0gdjAubWFwKCh7eCwgeX0pID0+ICh7eDogeCsxLCB5OiB5Knl9KSlcblxuICBhc3NlcnQub2sodjAgaW5zdGFuY2VvZiBQb2ludHMpXG4gIGFzc2VydC5ub3RPayh2MSBpbnN0YW5jZW9mIFBvaW50cylcbiAgYXNzZXJ0Lm9rKHYxIGluc3RhbmNlb2YgSW1tdXRhYmxlLkxpc3QpXG4gIGFzc2VydC5lcXVhbCh2MVtUeXBlZC50eXBlTmFtZV0oKSwgJ1R5cGVkLkxpc3QoQW55KScpXG5cbiAgYXNzZXJ0LmVxdWFsKHYwLnNpemUsIDMpXG4gIGFzc2VydC5lcXVhbCh2MS5zaXplLCAzKVxuXG4gIGFzc2VydC5kZWVwRXF1YWwodjAudG9KU09OKCksXG4gICAgICAgICAgICAgICAgICAgW3t4OjEsIHk6MH0sXG4gICAgICAgICAgICAgICAgICAgIHt4OjAsIHk6Mn0sXG4gICAgICAgICAgICAgICAgICAgIHt4OjMsIHk6M31dKVxuXG4gIGFzc2VydC5kZWVwRXF1YWwodjEudG9KU09OKCksXG4gICAgICAgICAgICAgICAgICAgW3t4OjIsIHk6MH0sXG4gICAgICAgICAgICAgICAgICAgIHt4OjEsIHk6NH0sXG4gICAgICAgICAgICAgICAgICAgIHt4OjQsIHk6OX1dKVxufSlcblxudGVzdCgnbWFwcyByZWNvcmRzIHRvIHJlY29yZHMnLCBhc3NlcnQgPT4ge1xuICBjb25zdCB2MCA9IFBvaW50cy5vZih7eDoxfSwge3k6Mn0sIHt4OjMsIHk6M30pXG4gIGNvbnN0IHYxID0gdjAubWFwKHBvaW50ID0+IHBvaW50LnVwZGF0ZSgneCcsIGluYylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXBkYXRlKCd5JywgaW5jKSlcblxuICBhc3NlcnQub2sodjAgaW5zdGFuY2VvZiBQb2ludHMpXG4gIGFzc2VydC5vayh2MSBpbnN0YW5jZW9mIFBvaW50cylcbiAgYXNzZXJ0Lm9rKHYxIGluc3RhbmNlb2YgSW1tdXRhYmxlLkxpc3QpXG5cbiAgYXNzZXJ0LmVxdWFsKHYwLnNpemUsIDMpXG4gIGFzc2VydC5lcXVhbCh2MS5zaXplLCAzKVxuXG4gIGFzc2VydC5kZWVwRXF1YWwodjAudG9KU09OKCksXG4gICAgICAgICAgICAgICAgICAgW3t4OjEsIHk6MH0sXG4gICAgICAgICAgICAgICAgICAgIHt4OjAsIHk6Mn0sXG4gICAgICAgICAgICAgICAgICAgIHt4OjMsIHk6M31dKVxuXG4gIGFzc2VydC5kZWVwRXF1YWwodjEudG9KU09OKCksXG4gICAgICAgICAgICAgICAgICAgW3t4OjIsIHk6MX0sXG4gICAgICAgICAgICAgICAgICAgIHt4OjEsIHk6M30sXG4gICAgICAgICAgICAgICAgICAgIHt4OjQsIHk6NH1dKVxufSlcblxuXG50ZXN0KCdmaWx0ZXJzIHZhbHVlcycsIGFzc2VydCA9PiB7XG4gIGNvbnN0IHYwID0gTnVtYmVyTGlzdC5vZigxLCAyLCAzLCA0LCA1LCA2KVxuICBjb25zdCB2MSA9IHYwLmZpbHRlcihpc0V2ZW50KVxuXG4gIGFzc2VydC5vayh2MCBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5vayh2MSBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG5cbiAgYXNzZXJ0LmVxdWFsKHYwLnNpemUsIDYpXG4gIGFzc2VydC5lcXVhbCh2MS5zaXplLCAzKVxuXG4gIGFzc2VydC5kZWVwRXF1YWwodjAudG9BcnJheSgpLCBbMSwgMiwgMywgNCwgNSwgNl0pXG4gIGFzc2VydC5kZWVwRXF1YWwodjEudG9BcnJheSgpLCBbMiwgNCwgNl0pXG59KVxuXG50ZXN0KCdyZWR1Y2VzIHZhbHVlcycsIGFzc2VydCA9PiB7XG4gIGNvbnN0IHYgPSBOdW1iZXJMaXN0Lm9mKDEsIDEwLCAxMDApXG5cbiAgYXNzZXJ0LmVxdWFsKHYucmVkdWNlKHN1bSksIDExMSlcbiAgYXNzZXJ0LmVxdWFsKHYucmVkdWNlKHN1bSwgMTAwMCksIDExMTEpXG5cbiAgYXNzZXJ0Lm9rKHYgaW5zdGFuY2VvZiBOdW1iZXJMaXN0KVxuICBhc3NlcnQuZGVlcEVxdWFsKHYudG9BcnJheSgpLCBbMSwgMTAsIDEwMF0pXG59KVxuXG50ZXN0KCdyZWR1Y2VzIGZyb20gdGhlIHJpZ2h0JywgYXNzZXJ0ID0+IHtcbiAgY29uc3QgdiA9IFN0cmluZ0xpc3Qub2YoJ2EnLCdiJywnYycpXG5cbiAgYXNzZXJ0LmVxdWFsKHYucmVkdWNlUmlnaHQoY29uY2F0KSwgJ2NiYScpXG4gIGFzc2VydC5lcXVhbCh2LnJlZHVjZVJpZ2h0KGNvbmNhdCwgJ3NlZWRlZCcpLCAnc2VlZGVkY2JhJylcblxuICBhc3NlcnQub2sodiBpbnN0YW5jZW9mIFN0cmluZ0xpc3QpXG4gIGFzc2VydC5kZWVwRXF1YWwodi50b0FycmF5KCksIFsnYScsICdiJywgJ2MnXSlcbn0pXG5cbnRlc3QoJ3Rha2VzIGFuZCBza2lwcyB2YWx1ZXMnLCBhc3NlcnQgPT4ge1xuICBjb25zdCB2MCA9IE51bWJlckxpc3Qub2YoMSwgMiwgMywgNCwgNSwgNilcbiAgY29uc3QgdjEgPSB2MC5za2lwKDIpXG4gIGNvbnN0IHYyID0gdjEudGFrZSgyKVxuXG4gIGFzc2VydC5vayh2MCBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5vayh2MSBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5vayh2MiBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG5cbiAgYXNzZXJ0LmVxdWFsKHYwLnNpemUsIDYpXG4gIGFzc2VydC5lcXVhbCh2MS5zaXplLCA0KVxuICBhc3NlcnQuZXF1YWwodjIuc2l6ZSwgMilcblxuICBhc3NlcnQuZGVlcEVxdWFsKHYwLnRvQXJyYXkoKSwgWzEsIDIsIDMsIDQsIDUsIDZdKVxuICBhc3NlcnQuZGVlcEVxdWFsKHYxLnRvQXJyYXkoKSwgWzMsIDQsIDUsIDZdKVxuICBhc3NlcnQuZGVlcEVxdWFsKHYyLnRvQXJyYXkoKSwgWzMsIDRdKVxufSlcblxudGVzdCgnZWZmaWNpZW50bHkgY2hhaW5zIGFycmF5IG1ldGhvZHMnLCBhc3NlcnQgPT4ge1xuICBjb25zdCB2ID0gTnVtYmVyTGlzdC5vZigxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQpXG5cbiAgYXNzZXJ0LmVxdWFsKHYuZmlsdGVyKHggPT4geCAlIDIgPT0gMClcbiAgICAgICAgICAgICAgICAuc2tpcCgyKVxuICAgICAgICAgICAgICAgIC5tYXAoeCA9PiB4ICogeClcbiAgICAgICAgICAgICAgICAudGFrZSgzKVxuICAgICAgICAgICAgICAgIC5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKSxcbiAgICAgICAgICAgICAgIDIwMClcblxuICBhc3NlcnQub2sodiBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5lcXVhbCh2LnNpemUsIDE0KVxuICBhc3NlcnQuZGVlcEVxdWFsKHYudG9BcnJheSgpLFxuICAgICAgICAgICAgICAgICAgIFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTRdKVxuXG59KVxuXG50ZXN0KCdjb252ZXJ0IHRvIG1hcCcsIGFzc2VydCA9PiB7XG4gIGNvbnN0IHYgPSBTdHJpbmdMaXN0Lm9mKFwiYVwiLCBcImJcIiwgXCJjXCIpXG4gIGNvbnN0IG0gPSB2LnRvTWFwKClcblxuICBhc3NlcnQub2sodiBpbnN0YW5jZW9mIFN0cmluZ0xpc3QpXG4gIGFzc2VydC5lcXVhbCh2LnNpemUsIDMpXG4gIGFzc2VydC5kZWVwRXF1YWwodi50b0FycmF5KCksIFtcImFcIiwgXCJiXCIsIFwiY1wiXSlcblxuICBhc3NlcnQuZXF1YWwobS5zaXplLCAzKVxuICBhc3NlcnQuZXF1YWwobS5nZXQoMSksIFwiYlwiKVxufSlcblxudGVzdCgncmV2ZXJzZXMnLCBhc3NlcnQgPT4ge1xuICBjb25zdCB2MCA9IFN0cmluZ0xpc3Qub2YoXCJhXCIsIFwiYlwiLCBcImNcIilcbiAgY29uc3QgdjEgPSB2MC5yZXZlcnNlKClcblxuICBhc3NlcnQub2sodjAgaW5zdGFuY2VvZiBTdHJpbmdMaXN0KVxuICBhc3NlcnQub2sodjEgaW5zdGFuY2VvZiBTdHJpbmdMaXN0KVxuXG4gIGFzc2VydC5lcXVhbCh2MC5zaXplLCAzKVxuICBhc3NlcnQuZXF1YWwodjEuc2l6ZSwgMylcblxuICBhc3NlcnQuZGVlcEVxdWFsKHYwLnRvQXJyYXkoKSwgW1wiYVwiLCBcImJcIiwgXCJjXCJdKVxuICBhc3NlcnQuZGVlcEVxdWFsKHYxLnRvQXJyYXkoKSwgW1wiY1wiLCBcImJcIiwgXCJhXCJdKVxufSlcblxudGVzdCgnZW5zdXJlcyBlcXVhbGl0eScsIGFzc2VydCA9PiB7XG4gIC8vIE1ha2UgYSBzdWZmaWNpZW50bHkgbG9uZyBsaXN0LlxuICBjb25zdCBhcnJheSA9IEFycmF5KDEwMCkuam9pbignYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonKS5zcGxpdCgnJylcblxuICBjb25zdCB2MSA9IFN0cmluZ0xpc3QoYXJyYXkpXG4gIGNvbnN0IHYyID0gU3RyaW5nTGlzdChhcnJheSlcblxuICBhc3NlcnQub2sodjEgIT0gdjIpXG4gIGFzc2VydC5vayh2MS5lcXVhbHModjIpKVxufSlcblxudGVzdCgnY29uY2F0IHdvcmtzIGxpa2UgQXJyYXkucHJvdG90eXBlLmNvbmNhdCcsIGFzc2VydCA9PiB7XG4gIGNvbnN0IHYxID0gTnVtYmVyTGlzdC5vZigxLCAyLCAzKTtcbiAgY29uc3QgdjIgPSB2MS5jb25jYXQoNCwgTnVtYmVyTGlzdC5vZig1LCA2KSwgWzcsIDhdLCBJbW11dGFibGUuU2VxKHthOjksYjoxMH0pLCBJbW11dGFibGUuU2V0Lm9mKDExLDEyKSk7XG5cbiAgYXNzZXJ0Lm9rKHYxIGluc3RhbmNlb2YgTnVtYmVyTGlzdClcbiAgYXNzZXJ0Lm9rKHYyIGluc3RhbmNlb2YgTnVtYmVyTGlzdClcblxuICBhc3NlcnQuZXF1YWwodjEuc2l6ZSwgMylcbiAgYXNzZXJ0LmVxdWFsKHYyLnNpemUsIDEyKVxuXG4gIGFzc2VydC5kZWVwRXF1YWwodjEudG9BcnJheSgpLCBbMSwgMiwgM10pXG4gIGFzc2VydC5kZWVwRXF1YWwodjIudG9BcnJheSgpLCBbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pXG59KVxuXG50ZXN0KCdhbGxvd3MgY2hhaW5lZCBtdXRhdGlvbnMnLCBhc3NlcnQgPT4ge1xuICBjb25zdCB2MSA9IE51bWJlckxpc3QoKVxuICBjb25zdCB2MiA9IHYxLnB1c2goMSlcbiAgY29uc3QgdjMgPSB2Mi53aXRoTXV0YXRpb25zKHYgPT4gdi5wdXNoKDIpLnB1c2goMykucHVzaCg0KSlcbiAgY29uc3QgdjQgPSB2My5wdXNoKDUpXG5cbiAgYXNzZXJ0Lm9rKHYxIGluc3RhbmNlb2YgTnVtYmVyTGlzdClcbiAgYXNzZXJ0Lm9rKHYyIGluc3RhbmNlb2YgTnVtYmVyTGlzdClcbiAgYXNzZXJ0Lm9rKHYzIGluc3RhbmNlb2YgTnVtYmVyTGlzdClcbiAgYXNzZXJ0Lm9rKHY0IGluc3RhbmNlb2YgTnVtYmVyTGlzdClcblxuICBhc3NlcnQuZXF1YWwodjEuc2l6ZSwgMClcbiAgYXNzZXJ0LmVxdWFsKHYyLnNpemUsIDEpXG4gIGFzc2VydC5lcXVhbCh2My5zaXplLCA0KVxuICBhc3NlcnQuZXF1YWwodjQuc2l6ZSwgNSlcblxuICBhc3NlcnQuZGVlcEVxdWFsKHYxLnRvQXJyYXkoKSwgW10pXG4gIGFzc2VydC5kZWVwRXF1YWwodjIudG9BcnJheSgpLCBbMV0pXG4gIGFzc2VydC5kZWVwRXF1YWwodjMudG9BcnJheSgpLCBbMSwyLDMsNF0pXG4gIGFzc2VydC5kZWVwRXF1YWwodjQudG9BcnJheSgpLCBbMSwyLDMsNCw1XSlcbn0pXG5cbnRlc3QoJ2FsbG93cyBjaGFpbmVkIG11dGF0aW9ucyB1c2luZyBhbHRlcm5hdGl2ZSBBUEknLCBhc3NlcnQgPT4ge1xuICBjb25zdCB2MSA9IE51bWJlckxpc3QoKVxuICBjb25zdCB2MiA9IHYxLnB1c2goMSlcbiAgY29uc3QgdjMgPSB2Mi5hc011dGFibGUoKS5wdXNoKDIpLnB1c2goMykucHVzaCg0KS5hc0ltbXV0YWJsZSgpXG4gIGNvbnN0IHY0ID0gdjMucHVzaCg1KVxuXG4gIGFzc2VydC5vayh2MSBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5vayh2MiBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5vayh2MyBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5vayh2NCBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG5cbiAgYXNzZXJ0LmVxdWFsKHYxLnNpemUsIDApXG4gIGFzc2VydC5lcXVhbCh2Mi5zaXplLCAxKVxuICBhc3NlcnQuZXF1YWwodjMuc2l6ZSwgNClcbiAgYXNzZXJ0LmVxdWFsKHY0LnNpemUsIDUpXG5cbiAgYXNzZXJ0LmRlZXBFcXVhbCh2MS50b0FycmF5KCksIFtdKVxuICBhc3NlcnQuZGVlcEVxdWFsKHYyLnRvQXJyYXkoKSwgWzFdKVxuICBhc3NlcnQuZGVlcEVxdWFsKHYzLnRvQXJyYXkoKSwgWzEsMiwzLDRdKVxuICBhc3NlcnQuZGVlcEVxdWFsKHY0LnRvQXJyYXkoKSwgWzEsMiwzLDQsNV0pXG59KVxuXG50ZXN0KCdhbGxvd3Mgc2l6ZSB0byBiZSBzZXQnLCBhc3NlcnQgPT4ge1xuICBjb25zdCBpbnB1dCA9IEltbXV0YWJsZS5SYW5nZSgwLCAyMDAwKVxuICBjb25zdCB2MSA9IE51bWJlckxpc3QoaW5wdXQpXG4gIGNvbnN0IHYyID0gdjEuc2V0U2l6ZSgxMDAwKVxuICBhc3NlcnQudGhyb3dzKF8gPT4gdjIuc2V0U2l6ZSgxNTAwKSxcbiAgICAgICAgICAgICAgICAvc2V0U2l6ZSBtYXkgb25seSBkb3duc2l6ZS8pXG4gIGNvbnN0IHYzID0gdjIuc2V0U2l6ZSgxMDAwKVxuXG4gIGFzc2VydC5vayh2MSBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5vayh2MiBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG4gIGFzc2VydC5vayh2MyBpbnN0YW5jZW9mIE51bWJlckxpc3QpXG5cbiAgYXNzZXJ0LmVxdWFsKHYxLnNpemUsIDIwMDApXG4gIGFzc2VydC5lcXVhbCh2Mi5zaXplLCAxMDAwKVxuICBhc3NlcnQuZXF1YWwodjMuc2l6ZSwgMTAwMClcblxuICBhc3NlcnQuZXF1YWwodjEuZ2V0KDkwMCksIDkwMClcbiAgYXNzZXJ0LmVxdWFsKHYxLmdldCgxMzAwKSwgMTMwMClcbiAgYXNzZXJ0LmVxdWFsKHYxLmdldCgxODAwKSwgMTgwMClcblxuICBhc3NlcnQuZXF1YWwodjIuZ2V0KDkwMCksIDkwMClcbiAgYXNzZXJ0LmVxdWFsKHYyLmdldCgxMzAwKSwgdm9pZCgwKSlcbiAgYXNzZXJ0LmVxdWFsKHYyLmdldCgxODAwKSwgdm9pZCgwKSlcblxuICBhc3NlcnQuZXF1YWwodjMuZ2V0KDkwMCksIDkwMClcbiAgYXNzZXJ0LmVxdWFsKHYzLmdldCgxMzAwKSwgdm9pZCgwKSlcbiAgYXNzZXJ0LmVxdWFsKHYzLmdldCgxODAwKSwgdm9pZCgwKSlcblxuICBhc3NlcnQub2sodjIuZXF1YWxzKHYzKSlcbn0pXG5cbnRlc3QoJ2NhbiBiZSBlZmZpY2llbnRseSBzbGljZWQnLCBhc3NlcnQgPT4ge1xuICBjb25zdCBpbnB1dCA9IEltbXV0YWJsZS5SYW5nZSgwLCAyMDAwKVxuICBjb25zdCB2MSA9IE51bWJlckxpc3QoaW5wdXQpXG4gIGNvbnN0IHYyID0gdjEuc2xpY2UoMTAwLC0xMDApXG5cbiAgYXNzZXJ0Lm9rKHYxIGluc3RhbmNlb2YgTnVtYmVyTGlzdClcbiAgYXNzZXJ0Lm9rKHYyIGluc3RhbmNlb2YgTnVtYmVyTGlzdClcblxuICBhc3NlcnQuZXF1YWwodjEuc2l6ZSwgMjAwMClcbiAgYXNzZXJ0LmVxdWFsKHYyLnNpemUsIDE4MDApXG5cbiAgYXNzZXJ0LmVxdWFsKHYyLmZpcnN0KCksIDEwMClcbiAgYXNzZXJ0LmVxdWFsKHYyLnJlc3QoKS5zaXplLCAxNzk5KVxuICBhc3NlcnQuZXF1YWwodjIubGFzdCgpLCAxODk5KVxuICBhc3NlcnQuZXF1YWwodjIuYnV0TGFzdCgpLnNpemUsIDE3OTkpXG59KVxuIl19