(function (factory) {
             if (typeof define === "function" && define.amd) {
                          define(["exports", "./test", "immutable", "../record", "../typed"], factory);
             } else if (typeof exports !== "undefined") {
                          factory(exports, require("./test"), require("immutable"), require("../record"), require("../typed"));
             }
})(function (exports, _test, _immutable, _record, _typed) {
             "use strict";

             var test = _test["default"];
             var Immutable = _immutable;
             var Record = _record.Record;
             var Typed = _typed.Typed;
             var Type = _typed.Type;
             var Any = _typed.Any;
             var Maybe = _typed.Maybe;
             var Union = _typed.Union;

             var Point = Record({
                          x: Number(0),
                          y: Number(0)
             }, "Point");

             test("number types", function (assert) {
                          assert.equal(Type.of(Number(4)).toString(), "Number");
                          assert.equal(Type.of(Number).toString(), "Number");
                          assert.equal(Type.of(Number()).toString(), "Number");

                          assert.equal(Type.of(Number(4)), Type.of(Number));
                          assert.equal(Type.of(Number(4)), Type.of(Number()));

                          assert.equal(Type.of(Number).read(5), 5);
                          assert.equal(Type.of(Number(4)).read(5), 5);
                          assert.ok(Type.of(Number).read() instanceof Type.Error);
                          assert.ok(Type.of(Number(5)).read() instanceof Type.Error);

                          assert.equal(Type.from(Number).toString(), "Number");
                          assert.equal(Type.from(Number()).toString(), "Number(0)");
                          assert.equal(Type.from(Number(0)).toString(), "Number(0)");
                          assert.equal(Type.from(Number(-3)).toString(), "Number(-3)");
                          assert.equal(Type.from(Number(32)).toString(), "Number(32)");

                          assert.equal(Type.from(Number(0)).read(), 0);
                          assert.ok(Type.from(Number(0)).read(null) instanceof Type.Error);
                          assert.equal(Type.from(Number(0)).read(null).message, "\"null\" is not a typeof \"number\"");

                          assert.equal(Type.from(Number()).read(), 0);
                          assert.ok(Type.from(Number()).read("5") instanceof Type.Error);
                          assert.equal(Type.from(Number()).read("5").message, "\"5\" is not a typeof \"number\"");

                          assert.equal(Type.from(Number).read(4), 4);
                          assert.equal(Type.from(Number).read(-4), -4);
                          assert.ok(Type.from(Number).read() instanceof Type.Error);
                          assert.equal(Type.from(Number).read().message, "\"undefined\" is not a typeof \"number\"");
             });

             test("string types", function (assert) {
                          assert.equal(Type.of(String("Hello")).toString(), "String");
                          assert.equal(Type.of(String).toString(), "String");
                          assert.equal(Type.of(String()).toString(), "String");
                          assert.equal(Type.from(String("Hello")).toString(), "String(\"Hello\")");
                          assert.equal(Type.from(String).toString(), "String");
                          assert.equal(Type.from(String()).toString(), "String(\"\")");

                          assert.equal(Type.of(String()), Type.of(String));
                          assert.equal(Type.of(String("hello")), Type.of(String));

                          assert.equal(Type.of(String).read("hi"), "hi");
                          assert.equal(Type.of(String()).read("hi"), "hi");
                          assert.equal(Type.of(String("bye")).read("hi"), "hi");

                          assert.ok(Type.of(String).read() instanceof Type.Error);
                          assert.ok(Type.of(String()).read() instanceof Type.Error);
                          assert.ok(Type.of(String("Hi")).read() instanceof Type.Error);

                          assert.ok(Type.of(String).read(5) instanceof Type.Error);
                          assert.ok(Type.of(String()).read({}) instanceof Type.Error);
                          assert.ok(Type.of(String("Hi")).read(null) instanceof Type.Error);

                          assert.equal(Type.from(String("Hi")).read(), "Hi");
                          assert.equal(Type.from(String()).read(), "");
                          assert.ok(Type.from(String).read() instanceof Type.Error);
                          assert.equal(Type.from(String).read().message, "\"undefined\" is not a typeof \"string\"");

                          assert.equal(Type.from(String("Hi")).read("Bye"), "Bye");
                          assert.equal(Type.from(String()).read("Bye"), "Bye");
                          assert.equal(Type.from(String).read("Bye"), "Bye");

                          assert.ok(Type.from(String("Hi")).read(null) instanceof Type.Error);
                          assert.equal(Type.from(String("Hi")).read(null).message, "\"null\" is not a typeof \"string\"");

                          assert.ok(Type.from(String()).read(5) instanceof Type.Error);
                          assert.equal(Type.from(String()).read(5).message, "\"5\" is not a typeof \"string\"");

                          assert.ok(Type.from(String).read({}) instanceof Type.Error);
                          assert.equal(Type.from(String).read({}).message, "\"[object Object]\" is not a typeof \"string\"");
             });

             test("boolean types", function (assert) {
                          assert.equal(Type.of(Boolean(true)).toString(), "Boolean");
                          assert.equal(Type.of(Boolean(false)).toString(), "Boolean");
                          assert.equal(Type.of(Boolean).toString(), "Boolean");
                          assert.equal(Type.of(Boolean()).toString(), "Boolean");

                          assert.equal(Type.from(Boolean(true)).toString(), "Boolean(true)");
                          assert.equal(Type.from(Boolean(false)).toString(), "Boolean(false)");
                          assert.equal(Type.from(Boolean).toString(), "Boolean");
                          assert.equal(Type.from(Boolean()).toString(), "Boolean(false)");

                          assert.equal(Type.of(Boolean()), Type.of(Boolean));
                          assert.equal(Type.of(Boolean(true)), Type.of(Boolean));
                          assert.equal(Type.of(Boolean(false)), Type.of(Boolean));

                          assert.equal(Type.of(Boolean).read(true), true);
                          assert.equal(Type.of(Boolean).read(false), false);
                          assert.equal(Type.of(Boolean()).read(true), true);
                          assert.equal(Type.of(Boolean(true)).read(false), false);

                          assert.ok(Type.of(Boolean).read() instanceof Type.Error);
                          assert.ok(Type.of(Boolean()).read() instanceof Type.Error);
                          assert.ok(Type.of(Boolean(true)).read() instanceof Type.Error);
                          assert.ok(Type.of(Boolean(false)).read() instanceof Type.Error);

                          assert.ok(Type.of(Boolean).read(5) instanceof Type.Error);
                          assert.ok(Type.of(Boolean()).read({}) instanceof Type.Error);
                          assert.ok(Type.of(Boolean(true)).read(null) instanceof Type.Error);

                          assert.equal(Type.from(Boolean(true)).read(), true);
                          assert.equal(Type.from(Boolean(false)).read(), false);
                          assert.equal(Type.from(Boolean()).read(), false);
                          assert.ok(Type.from(Boolean).read() instanceof Type.Error);
                          assert.equal(Type.from(Boolean).read().message, "\"undefined\" is not a typeof \"boolean\"");

                          assert.equal(Type.from(Boolean(true)).read(false), false);
                          assert.equal(Type.from(Boolean(false)).read(true), true);
                          assert.equal(Type.from(Boolean()).read(true), true);
                          assert.equal(Type.from(Boolean).read(false), false);

                          assert.ok(Type.from(Boolean(true)).read(null) instanceof Type.Error);
                          assert.equal(Type.from(Boolean(true)).read(null).message, "\"null\" is not a typeof \"boolean\"");

                          assert.ok(Type.from(Boolean()).read(5) instanceof Type.Error);
                          assert.equal(Type.from(Boolean()).read(5).message, "\"5\" is not a typeof \"boolean\"");

                          assert.ok(Type.from(Boolean).read({}) instanceof Type.Error);
                          assert.equal(Type.from(Boolean).read({}).message, "\"[object Object]\" is not a typeof \"boolean\"");
             });

             test("undefined type", function (assert) {
                          assert.equal(Type.of(undefined).toString(), "Undefined");
                          assert.equal(Type.from(undefined).toString(), "Undefined");

                          assert.equal(Type.of(undefined).read(), undefined);
                          assert.ok(Type.of(undefined).read(5) instanceof Type.Error);
                          assert.equal(Type.of(undefined).read(5).message, "\"5\" is not void");
                          assert.equal(Type.of(undefined).read(null).message, "\"null\" is not void");

                          assert.equal(Type.from(undefined).read(), undefined);
                          assert.ok(Type.from(undefined).read(5) instanceof Type.Error);
                          assert.equal(Type.from(undefined).read(5).message, "\"5\" is not void");
                          assert.equal(Type.from(undefined).read(null).message, "\"null\" is not void");
             });

             test("null type", function (assert) {
                          assert.equal(Type.of(null).toString(), "Null");
                          assert.equal(Type.from(null).toString(), "Null");

                          assert.ok(Type.of(null).read() instanceof Type.Error);
                          assert.equal(Type.of(null).read(5).message, "\"5\" is not a null");
                          assert.ok(Type.of(null).read(5) instanceof Type.Error);
                          assert.equal(Type.of(null).read(5).message, "\"5\" is not a null");
                          assert.equal(Type.of(null).read(null), null);

                          assert.ok(Type.from(null).read() instanceof Type.Error);
                          assert.equal(Type.from(null).read().message, "\"undefined\" is not a null");
                          assert.ok(Type.from(null).read(5) instanceof Type.Error);
                          assert.equal(Type.from(null).read(5).message, "\"5\" is not a null");
                          assert.equal(Type.from(null).read(null), null);
             });

             test("array type", function (assert) {
                          assert.equal(Type.of(Array).toString(), "Array");
                          assert.equal(Type.of(Array()).toString(), "Array");
                          assert.equal(Type.of(Array(1, 2)).toString(), "Array");

                          assert.equal(Type.from(Array).toString(), "Array");
                          assert.equal(Type.from(Array()).toString(), "Array");
                          assert.equal(Type.from(Array(1, 2)).toString(), "Array(1,2)");

                          assert.equal(Type.of(Array()), Type.of(Array));
                          assert.equal(Type.of(Array(1)), Type.of(Array));
                          assert.equal(Type.of(Array(1, 2, 3)), Type.of(Array));

                          assert.deepEqual(Type.of(Array).read([1, 2]), [1, 2]);
                          assert.deepEqual(Type.of(Array()).read([1, 2]), [1, 2]);
                          assert.deepEqual(Type.of(Array(1)).read([1, 2, 3]), [1, 2, 3]);
                          assert.deepEqual(Type.of(Array(1, 2, 3)).read([]), []);

                          assert.deepEqual(Type.from(Array()).read(), []);
                          assert.deepEqual(Type.from(Array(1, 2)).read(), [1, 2]);
                          // TODO: Figure out how to fix `Array(7)` case.
                          assert.deepEqual(Type.from([7]).read(), [7]);
                          assert.deepEqual(Type.from(Array(1, 2, 3)).read(), [1, 2, 3]);

                          assert.deepEqual(Type.from(Array()).read([1, 2]), [1, 2]);
                          assert.deepEqual(Type.from(Array(1, 2)).read([]), []);
                          // TODO: Figure out how to fix `Array(7)` case.
                          assert.deepEqual(Type.from([7]).read([17]), [17]);
                          assert.deepEqual(Type.from(Array(1, 2, 3)).read([3, 2, 1]), [3, 2, 1]);

                          assert.ok(Type.of(Array).read(2) instanceof Type.Error);
                          assert.ok(Type.of(Array()).read({}) instanceof Type.Error);
                          assert.ok(Type.of(Array(1)).read(null) instanceof Type.Error);
                          assert.ok(Type.of(Array(1, 2, 3)).read("1, 2, 3") instanceof Type.Error);

                          assert.ok(Type.from(Array()).read(null) instanceof Type.Error);
                          assert.ok(Type.from(Array(1, 2)).read(7) instanceof Type.Error);
                          assert.ok(Type.from([7]).read({}) instanceof Type.Error);
                          assert.ok(Type.from(Array(1, 2, 3)).read(function () {}) instanceof Type.Error);
             });
});
//# sourceMappingURL=data:application/json;base64,