(function (factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./typed", "immutable"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./typed"), require("immutable"));
  }
})(function (exports, _typed, _immutable) {
  "use strict";

  var _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) { _arr.push(_step.value); if (i && _arr.length === i) break; } return _arr; } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } };

  var _defineProperty = function (obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); };

  var _createComputedClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var prop = props[i]; prop.configurable = true; if (prop.value) prop.writable = true; Object.defineProperty(target, prop.key, prop); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

  var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

  var Typed = _typed.Typed;
  var typeOf = _typed.typeOf;
  var construct = _typed.construct;
  var Seq = _immutable.Seq;
  var Iterable = _immutable.Iterable;
  var Map = _immutable.Map;
  var Keyed = Iterable.Keyed;

  var Getter = function (key) {
    return function () {
      return this.get(key);
    };
  };

  var Setter = function (key) {
    return function (value) {
      if (!this.__ownerID) {
        throw TypeError("Cannot set on an immutable record.");
      }
      this.set(key, value);
    };
  };

  var $store = Typed.store;
  var $type = Typed.type;
  var $step = Typed.step;
  var $init = Typed.init;
  var $result = Typed.result;
  var $read = Typed.read;
  var $label = Typed.label;
  var $empty = Typed.empty;
  var $typeName = Typed.typeName;
  var $typeSignature = Typed.typeSignature;

  var TypedRecord = (function (_Iterable$Keyed) {
    function TypedRecord() {
      _classCallCheck(this, TypedRecord);
    }

    _inherits(TypedRecord, _Iterable$Keyed);

    _createComputedClass(TypedRecord, [{
      key: Typed.init,
      value: function () {
        return construct(this).asMutable();
      }
    }, {
      key: Typed.result,
      value: function (result) {
        return result.asImmutable();
      }
    }, {
      key: Typed.read,
      value: function () {
        var structure = arguments[0] === undefined ? {} : arguments[0];

        var Type = this.constructor;

        if (structure instanceof Type && structure.constructor === Type) {
          return structure;
        }

        if (!structure || typeof structure !== "object") {
          return TypeError("Invalid data structure \"" + structure + "\" was passed to " + this[$typeName]());
        }

        var seq = Seq(structure);
        var type = this[$type];

        var record = undefined;
        for (var key in type) {
          var fieldType = type[key];
          var value = seq.has(key) ? seq.get(key) : this.get(key);
          var result = fieldType[$read](value);

          if (result instanceof TypeError) {
            return TypeError("Invalid value for \"" + key + "\" field:\n " + result.message);
          }

          record = this[$step](record || this[$init](), [key, result]);
        }

        return this[$result](record);
      }
    }, {
      key: Typed.step,
      value: function (result, _ref) {
        var _ref2 = _slicedToArray(_ref, 2);

        var key = _ref2[0];
        var value = _ref2[1];

        var store = result[$store] ? result[$store].set(key, value) : new Map([[key, value]]);

        var record = result.__ownerID ? result : construct(result);
        record[$store] = store;

        return record;
      }
    }, {
      key: Typed.typeSignature,
      value: function () {
        var type = this[$type];
        var body = [];
        for (var key in type) {
          body.push("" + key + ": " + type[key][$typeName]());
        }

        return "Typed.Record({" + body.join(", ") + "})";
      }
    }, {
      key: Typed.typeName,
      value: function () {
        return this[$label] || this[$typeSignature]();
      }
    }, {
      key: "toString",
      value: function toString() {
        return this.__toString(this[$typeName]() + "({", "})");
      }
    }, {
      key: "has",
      value: function has(key) {
        return !!this[$type][key];
      }
    }, {
      key: "get",
      value: function get(key, defaultValue) {
        return !this[$type][key] ? defaultValue : !this[$store] ? defaultValue : this[$store].get(key, defaultValue);
      }
    }, {
      key: "clear",
      value: function clear() {
        if (this.__ownerID) {
          this[$store] && this[$store].clear();
          return this;
        }

        var RecordType = this.constructor;
        return this[$empty] || (RecordType[$empty] = new RecordType());
      }
    }, {
      key: "remove",
      value: function remove(key) {
        return this[$type][key] ? this.set(key, void 0) : this;
      }
    }, {
      key: "set",
      value: function set(key, value) {
        var fieldType = this[$type][key];

        if (!fieldType) {
          throw TypeError("Cannot set unknown field \"" + key + "\" on \"" + this[$typeName]() + "\"");
        }

        var result = fieldType[$read](value);

        if (result instanceof TypeError) {
          throw TypeError("Invalid value for " + key + " field: " + result.message);
        }

        return this[$step](this, [key, result]);
      }
    }, {
      key: "__iterator",
      value: function __iterator(type, reverse) {
        var _this = this;

        return Keyed(this[$type]).map(function (_, key) {
          return _this.get(key);
        }).__iterator(type, reverse);
      }
    }, {
      key: "__iterate",
      value: function __iterate(f, reverse) {
        var _this = this;

        return Keyed(this[$type]).map(function (_, key) {
          return _this.get(key);
        }).__iterate(f, reverse);
      }
    }, {
      key: "__ensureOwner",
      value: function __ensureOwner(ownerID) {
        if (ownerID === this.__ownerID) {
          return this;
        }

        var store = this[$store] && this[$store].__ensureOwner(ownerID);
        var result = !ownerID ? this : construct(this);

        result.__ownerID = ownerID;
        result[$store] = store;
        return result;
      }
    }, {
      key: "wasAltered",
      value: function wasAltered() {
        return this[$store].wasAltered();
      }
    }]);

    return TypedRecord;
  })(Iterable.Keyed);

  var Record = function Record(descriptor, label) {
    if (descriptor && typeof descriptor === "object") {
      var _ret = (function () {
        var type = Object.create(null);
        var keys = Object.keys(descriptor);
        var size = keys.length;

        if (size > 0) {
          var _ret2 = (function () {
            var properties = (function () {
              var _properties = {
                size: { value: size } };

              _defineProperty(_properties, $type, { value: type });

              _defineProperty(_properties, $label, { value: label });

              return _properties;
            })();

            var index = 0;
            while (index < size) {
              var key = keys[index];
              var fieldType = typeOf(descriptor[key]);

              if (fieldType) {
                type[key] = fieldType;
                properties[key] = { get: Getter(key), set: Setter(key), enumerable: true };
              } else {
                throw TypeError("Invalid field descriptor provided for a \"" + key + "\" field");
              }

              index = index + 1;
            }

            var RecordType = (function (_RecordType) {
              var _RecordTypeWrapper = function RecordType(_x) {
                return _RecordType.apply(this, arguments);
              };

              _RecordTypeWrapper.toString = function () {
                return _RecordType.toString();
              };

              return _RecordTypeWrapper;
            })(function (structure) {
              var isNew = this instanceof RecordType;
              var constructor = isNew ? this.constructor : RecordType;

              if (structure instanceof constructor) {
                return structure;
              }

              var type = constructor.prototype;
              var result = type[$read](structure);

              if (result instanceof TypeError) {
                throw result;
              }

              if (isNew) {
                this[$store] = result[$store];
              } else {
                return result;
              }
            });

            properties.constructor = { value: RecordType };
            RecordType.prototype = Object.create(RecordPrototype, properties);
            var prototype = RecordType.prototype;

            return {
              v: {
                v: RecordType
              }
            };
          })();

          if (typeof _ret2 === "object") return _ret2.v;
        } else {
          throw TypeError("Typed.Record descriptor must define at least on field");
        }
      })();

      if (typeof _ret === "object") {
        return _ret.v;
      }
    } else {
      throw TypeError("Typed.Record must be passed a descriptor of fields");
    }
  };
  exports.Record = Record;
  Record.Type = TypedRecord;
  Record.prototype = TypedRecord.prototype;
  var RecordPrototype = TypedRecord.prototype;

  RecordPrototype[Typed.DELETE] = RecordPrototype.remove;

  // Large part of the Record API is implemented by Immutabel.Map
  // and is just copied over.
  RecordPrototype.deleteIn = Map.prototype.deleteIn;
  RecordPrototype.removeIn = Map.prototype.removeIn;
  RecordPrototype.merge = Map.prototype.merge;
  RecordPrototype.mergeWith = Map.prototype.mergeWith;
  RecordPrototype.mergeIn = Map.prototype.mergeIn;
  RecordPrototype.mergeDeep = Map.prototype.mergeDeep;
  RecordPrototype.mergeDeepWith = Map.prototype.mergeDeepWith;
  RecordPrototype.mergeDeepIn = Map.prototype.mergeDeepIn;
  RecordPrototype.setIn = Map.prototype.setIn;
  RecordPrototype.update = Map.prototype.update;
  RecordPrototype.updateIn = Map.prototype.updateIn;
  RecordPrototype.withMutations = Map.prototype.withMutations;
  RecordPrototype.asMutable = Map.prototype.asMutable;
  RecordPrototype.asImmutable = Map.prototype.asImmutable;

  // Large chuck of API inherited from Iterable does not makes
  // much sense in the context of records so we undefine it.
  RecordPrototype.map = void 0;
  RecordPrototype.filter = void 0;
  RecordPrototype.filterNot = void 0;
  RecordPrototype.flip = void 0;
  RecordPrototype.mapKeys = void 0;
  RecordPrototype.mapEntries = void 0;
  RecordPrototype.sort = void 0;
  RecordPrototype.sortBy = void 0;
  RecordPrototype.reverse = void 0;
  RecordPrototype.slice = void 0;
  RecordPrototype.butLast = void 0;
  RecordPrototype.flatMap = void 0;
  RecordPrototype.flatten = void 0;
  RecordPrototype.rest = void 0;
  RecordPrototype.skip = void 0;
  RecordPrototype.skipLast = void 0;
  RecordPrototype.skipWhile = void 0;
  RecordPrototype.skipUntil = void 0;
  RecordPrototype.sortBy = void 0;
  RecordPrototype.take = void 0;
  RecordPrototype.takeLast = void 0;
  RecordPrototype.takeWhile = void 0;
  RecordPrototype.takeUntil = void 0;
});
//# sourceMappingURL=data:application/json;base64,